{
    "docs": [
        {
            "location": "/", 
            "text": "PeeringDB 2.0\n\n\nIntroduction\n\n\nGoals\n\n\nThis stage is an introduction to the new RESTful API and RFC on the new schema and interface. Changes are automatically synced from version 1 every hour.\n\n\n\n\nAttention\n\n\nThe MySQL interface \nWILL\n be going away\n\n\n\n\nWe do not have a specific time frame for moving away from the legacy interface, and will make sure everyone has ample chance to migrate to the JSON interface.\n\n\nTimeline\n\n\nThe next phase will be getting people switched over to the new API and making any changes deemed necessary. Once we've accomplished that, we intend on having the write interface ready to go and can make the switch.\n\n\nChanges from version 1\n\n\n\n\nAll fields are validated (email, IP address, etc), fields not validated are either discarded or put into a notes field.\n\n\nNetwork connections to Internet Exchanges have changed to \"links\" with multiple IP addresses on them\n\n\nNumerous small schema changes\n\n\nAll objects are structured under an Organization with granular access controls\n\n\n\n\nQuick start\n\n\nIf you want to poke around on your own, it's \nreadonly\n at \nhttps://beta.peeringdb.com/\n with self describing API docs at \nhttps://beta.peeringdb.com/apidocs/\n\n\nMore thorough docs are at \nAPI Specs\n, but in a nutshell, just prepend the URL with \napi/\n to get that object in JSON.\n\n\nFor example:\n\n\nhttps://beta.peeringdb.com/net/1\n\nbecomes\n\n\nhttps://beta.peeringdb.com/api/net/1\n\n\nList all via API by taking the \nid\n off:\n\n\nhttps://beta.peeringdb.com/api/net\n\n\nMailing lists\n\n\nWe have changed the way in which PeeringDB will be announcing future enhancements, changes, maintenance windows, and other information. If you would like to be notified of certain events, or participate in certain discussions, please subscribe to one of the following email lists:\n\n\n\n\n\n\nPeeringDB Announce\n\n    All PeeringDB administrative information, such as upgrades,\n\n    maintenances, outages, etc.\n\n\n\n\n\n\nPeeringDB Governance\n\n    Discussion list for PeeringDB governance issues This is a\n\n    community-based effort, the community\u2019s input will help guide the\n\n    future of the PeeringDB (as it has always done).\n\n\n\n\n\n\nPeeringDB Technical\n\n    Discussion of the back end of PeeringDB \n other technical topics\n\n\n\n\n\n\nPeeringDB User-Discuss\n\n    All other list traffic.\n\n\n\n\n\n\nOur goal is to give you all the information you want, and no more.  Please subscribe to any of these lists you feel are appropriate, or none. You will still be able to use the database even if you are not subscribed to any lists.\n\n\nHow you can help\n\n\n\n\nCheck your entries and make sure everything looks correct\n\n\nPort any scripts to the new API\n\n\nSend us feedback\n\n\nImprove these docs\n\n\n\n\nReporting Issues\n\n\nStrictly speaking we're really only looking for API bugs and missing or incorrect data right now. The web front end is crude and unpolished and mainly there to view the information without using the API. That said, any reports will be helpful when we get to that (which will be next).\n\n\nYou may view and report issues for version 2 at \nGitHub\n\n\nIf you find incorrect data in version 1 (at www.peeringdb.com), please just email\n\nsupport@peeringdb.com with what should be corrected.\n\n\nQuestions, comments and everything else should go to support@peeringdb.com\n\n\nThanks for the testing/feedback, we look forward to hearing from you!", 
            "title": "Home"
        }, 
        {
            "location": "/#peeringdb-20", 
            "text": "", 
            "title": "PeeringDB 2.0"
        }, 
        {
            "location": "/#introduction", 
            "text": "Goals  This stage is an introduction to the new RESTful API and RFC on the new schema and interface. Changes are automatically synced from version 1 every hour.   Attention  The MySQL interface  WILL  be going away   We do not have a specific time frame for moving away from the legacy interface, and will make sure everyone has ample chance to migrate to the JSON interface.  Timeline  The next phase will be getting people switched over to the new API and making any changes deemed necessary. Once we've accomplished that, we intend on having the write interface ready to go and can make the switch.  Changes from version 1   All fields are validated (email, IP address, etc), fields not validated are either discarded or put into a notes field.  Network connections to Internet Exchanges have changed to \"links\" with multiple IP addresses on them  Numerous small schema changes  All objects are structured under an Organization with granular access controls", 
            "title": "Introduction"
        }, 
        {
            "location": "/#quick-start", 
            "text": "If you want to poke around on your own, it's  readonly  at  https://beta.peeringdb.com/  with self describing API docs at  https://beta.peeringdb.com/apidocs/  More thorough docs are at  API Specs , but in a nutshell, just prepend the URL with  api/  to get that object in JSON.  For example:  https://beta.peeringdb.com/net/1 \nbecomes  https://beta.peeringdb.com/api/net/1  List all via API by taking the  id  off:  https://beta.peeringdb.com/api/net", 
            "title": "Quick start"
        }, 
        {
            "location": "/#mailing-lists", 
            "text": "We have changed the way in which PeeringDB will be announcing future enhancements, changes, maintenance windows, and other information. If you would like to be notified of certain events, or participate in certain discussions, please subscribe to one of the following email lists:    PeeringDB Announce \n    All PeeringDB administrative information, such as upgrades, \n    maintenances, outages, etc.    PeeringDB Governance \n    Discussion list for PeeringDB governance issues This is a \n    community-based effort, the community\u2019s input will help guide the \n    future of the PeeringDB (as it has always done).    PeeringDB Technical \n    Discussion of the back end of PeeringDB   other technical topics    PeeringDB User-Discuss \n    All other list traffic.    Our goal is to give you all the information you want, and no more.  Please subscribe to any of these lists you feel are appropriate, or none. You will still be able to use the database even if you are not subscribed to any lists.", 
            "title": "Mailing lists"
        }, 
        {
            "location": "/#how-you-can-help", 
            "text": "Check your entries and make sure everything looks correct  Port any scripts to the new API  Send us feedback  Improve these docs", 
            "title": "How you can help"
        }, 
        {
            "location": "/#reporting-issues", 
            "text": "Strictly speaking we're really only looking for API bugs and missing or incorrect data right now. The web front end is crude and unpolished and mainly there to view the information without using the API. That said, any reports will be helpful when we get to that (which will be next).  You may view and report issues for version 2 at  GitHub  If you find incorrect data in version 1 (at www.peeringdb.com), please just email \nsupport@peeringdb.com with what should be corrected.  Questions, comments and everything else should go to support@peeringdb.com  Thanks for the testing/feedback, we look forward to hearing from you!", 
            "title": "Reporting Issues"
        }, 
        {
            "location": "/gov/", 
            "text": "PeeringDB Governance\n\n\nQualifications for Membership\n\n\nA corporation, limited liability company, partnership or other legal business entity may be a Member of the Corporation. Membership is determined by having both an active PeeringDB.com account and an individual representative or role subscription to the \nPeeringDB Governance mailing list\n\n\nInitial Board\n\n\nAnyone can run for election to the initial Board. 300-word max candidate statement will be included in the ballot. Text ballot sorted alphabetically by last name, will be emailed to pdb-gov list on November 15th, with voting to happen from November 15th through 30th.\n\n\nLegal / Documents\n\n\nPlease see the full set of DRAFT \ndocuments\n for more information.", 
            "title": "Governance"
        }, 
        {
            "location": "/gov/#peeringdb-governance", 
            "text": "", 
            "title": "PeeringDB Governance"
        }, 
        {
            "location": "/gov/#qualifications-for-membership", 
            "text": "A corporation, limited liability company, partnership or other legal business entity may be a Member of the Corporation. Membership is determined by having both an active PeeringDB.com account and an individual representative or role subscription to the  PeeringDB Governance mailing list", 
            "title": "Qualifications for Membership"
        }, 
        {
            "location": "/gov/#initial-board", 
            "text": "Anyone can run for election to the initial Board. 300-word max candidate statement will be included in the ballot. Text ballot sorted alphabetically by last name, will be emailed to pdb-gov list on November 15th, with voting to happen from November 15th through 30th.", 
            "title": "Initial Board"
        }, 
        {
            "location": "/gov/#legal-documents", 
            "text": "Please see the full set of DRAFT  documents  for more information.", 
            "title": "Legal / Documents"
        }, 
        {
            "location": "/faq/", 
            "text": "FAQ\n\n\nHow do I query by ASN?\n\n\n\n\nYou may type in the ASN in the search box\n\n\nhttp://as12345.b.peeringdb.com\n (subdomain because of HSTS, will go back to normal on release)\n\n\nhttps://beta.peeringdb.com/asn/12345\n\nFor API\n\n\nhttps://beta.peeringdb.com/api/asn/12345\n\n\n\n\nHow do I get a login?\n\n\n\n\nYour original login should work, if not please email support@peeringdb.com", 
            "title": "FAQ"
        }, 
        {
            "location": "/faq/#faq", 
            "text": "", 
            "title": "FAQ"
        }, 
        {
            "location": "/faq/#how-do-i-query-by-asn", 
            "text": "You may type in the ASN in the search box  http://as12345.b.peeringdb.com  (subdomain because of HSTS, will go back to normal on release)  https://beta.peeringdb.com/asn/12345 \nFor API  https://beta.peeringdb.com/api/asn/12345", 
            "title": "How do I query by ASN?"
        }, 
        {
            "location": "/faq/#how-do-i-get-a-login", 
            "text": "Your original login should work, if not please email support@peeringdb.com", 
            "title": "How do I get a login?"
        }, 
        {
            "location": "/api_specs/", 
            "text": "RESTful API Endpoints and Specifications\n\n\nRequests\n\n\nURL\n\n\n\n\n\n\nThe URL base appended with \n/api/\n, append with object type and optionally object primary key\n\n\nObject type is not case sensitive.\n\n\nFor example:\n\n\n\n\nhttps://beta.peeringdb.com/api/\nOBJ\n/\nid\n\n\n\n\n\n\n\n\nEncoding\n\n\n\n\n\n\nTo specify the output format, either use the \nAccept:\n HTTP header\n\n\nAccept: application/json\n\n\n\nOr use extension \ntype\n\n\nhttps://beta.peeringdb.com/api/network/42.json\n\n\n\n\n\nJSON\n\n\n\n\nall returns fit into object:\n\n\n{\nmeta:\n  {\n  status:\n  message:\n  }\ndata:\n  [\n  {},\n  {}\n  ]\n}\n\n\n\n\n\nmeta are optional\n\n\ndata always array \n\n\n\n\n\n\nNote\n\n\nPlease let us know what serializers you'd like to see\n\n\n\n\n\n\n\n\nAuthentication\n\n\n\n\nBasic HTTP authorization\n\n\n\n\nOperations\n\n\nGET: multiple objects\n\n\nendpoint: GET /api/\nOBJ\n\n\n\n\noptional URL parameters\n\n\n\n\n\n\nlimit \nint\n limits rows in the result set\n\n\nskip \nint\n skips n rows in the result set\n\n\ndepth \nint\n nested sets will be loaded (slow)\n\n\nfields \nstr\n comma separated list of field names - only matching fields will be returned in the data\n\n\n[field_name] \nint|string\n queries for fields with matching value\n\n\n\n\n\n\nreturns\n\n\narray of objects\n\n\n\n\nHTTP:\n\n\nGET /api/OBJ\n\n\n\ncurl:\n\n\ncurl -X GET https://guest:guest@beta.peeringdb.com/api/OBJ\n\n\n\nNested data\n\n\nAny field ending in the suffix \n_set\n is a list of objects in a relationship with the parent object, you can expand those lists with the 'depth' parameter as explained below.\n\n\nThe naming schema of the field will always tell you which type of object the set is holding and will correspond with the object's endpoint on the API\n\n\nobject_type\n_set\n\n\n\nSo a set called 'net_set' will hold Network objects (api endpoint /net)\n\n\nNote: unlike GET single, 'depth' here will \nONLY\n expand sets, no single relationships will be expanded - this is by design\n\n\nDepth\n\n\n\n\n0: dont expand anything (default)\n\n\n1: expand all first level sets to ids\n\n\n2: expand all first level sets to objects\n\n\n\n\ncurl:\n\n\ncurl -X GET https://guest:guest@beta.peeringdb.com/api/OBJ?depth=2\n\n\n\nQuerying examples\n\n\nexact:\n\n\ncurl -X GET https://guest:guest@beta.peeringdb.com/api/OBJ?name=something\n\n\n\nmodifier:\n\n\ncurl -X GET https://guest:guest@beta.peeringdb.com/api/OBJ?name__contains=something\n\n\n\nQuerying modifiers\n\n\nnumeric fields:\n\n\n\n\n__lt, less than\n\n\n__lte, less than equal\n\n\n__gt, greater than\n\n\n__gte, greater than equal\n\n\n__in, value inside set of values (comma separated)\n\n\n\n\nstring fields:\n\n\n\n\n__contains, field value contains this value\n\n\n__startswith, field value starts with this value\n\n\n__in, value inside set of values (comma separated)\n\n\n\n\nGET: single object\n\n\nendpoint: GET /api/\nOBJ\n/\nid\n\n\n\n\nrequired URL parameters\n\n\n\n\n\n\n\n\nid \nint\n\n\n\n\n\n\noptional URL parameters\n\n\n\n\n\n\n\n\ndepth \nint\n nested sets and objects will be expanded \n\n\nfields \nstr\n comma separated list of field names - only matching fields will be returned in the data\n\n\n\n\n\n\nreturns\n\n\nsingle object in an array\n\n\n\n\nHTTP:\n\n\nGET /api/OBJ/42\n\n\n\ncurl:\n\n\ncurl -H \"Accept: application/json\" -X GET https://guest:guest@beta.peeringdb.com/api/OBJ/42\n\n\n\nNested data\n\n\nAny field ending in the suffix \n_set\n is a list of objects in a relationship with the parent object, you can expand those lists with the 'depth' parameter as explained below.\n\n\nThe naming schema of the field will always tell you which type of object the set is holding and will correspond with the object's endpoint on the API\n\n\nobject_type\n_set\n\n\n\nSo a set called 'net_set' will hold Network objects (api endpoint /net)\n\n\nNote: unlike GET multiple, 'depth' here will also expand single relationship in addition to sets. So 'net_id' would get expanded into a network object.\n\n\nunexpanded:\n\n\n{ \n  ...\n  \"net_id\" : 1\n}\n\n\n\nexpanded:\n\n\n{\n  ...\n  \"net_id\" : 1\n  \"net\" : {\n     ... network object ...\n  }\n}\n\n\n\nDepth\n\n\n\n\n0: dont expand anything (default)\n\n\n1 to 4: expand all sets and related objects according to level of depth specified\n\n\n\n\nPOST: create new object\n\n\nendpoint: POST /api/\nOBJ\n\n\n\n\nrequired URL parameters\n\n\n\n\n\n\nid \nint\n\n\nfields to post in either JSON obj \"{}\" or urlencoded field=value\n\n\n\n\n\n\n\n\ncurl:\n\n\ncurl  -H \"Accept: application/json\" -X POST --data \"{\\\"\"state\"\\\":\\\"active\\\"}\" https://guest:guest@beta.peeringdb.com/api/OBJ\n\n\n\nPUT: edit object\n\n\nendpoint: PUT /api/\nOBJ\n/\nid\n\n\n\n\nrequired URL parameters\n\n\n\n\n\n\nid \nint\n\n\nfields to post in either JSON obj \"{}\" or urlencoded field=value\n\n\n\n\n\n\n\n\nHTTP:\n\n\nPUT /api/OBJ/42\n\n\n\ncurl:\n\n\ncurl  -H \"Accept: application/json\" -X PUT --data \"{\\\"\"state\"\\\":\\\"active\\\"}\" https://guest:guest@beta.peeringdb.com/api/OBJ/42\n\n\n\nDELETE: delete object\n\n\nendpoint: DELETE /api/\nOBJ\n/\nid\n\n\n\n\nrequired URL parameters\n\n\n\n\n\n\nid \nint\n\n\n\n\n\n\n\n\nHTTP:\n\n\nDELETE /api/OBJ/42\n\n\n\ncurl:\n\n\ncurl -H \"Accept: application/json\" -X DELETE https://guest:guest@beta.peeringdb.com/api/OBJ/42", 
            "title": "API Specs"
        }, 
        {
            "location": "/api_specs/#restful-api-endpoints-and-specifications", 
            "text": "", 
            "title": "RESTful API Endpoints and Specifications"
        }, 
        {
            "location": "/api_specs/#requests", 
            "text": "URL    The URL base appended with  /api/ , append with object type and optionally object primary key  Object type is not case sensitive.  For example:   https://beta.peeringdb.com/api/ OBJ / id     Encoding    To specify the output format, either use the  Accept:  HTTP header  Accept: application/json  Or use extension  type  https://beta.peeringdb.com/api/network/42.json   JSON   all returns fit into object:  {\nmeta:\n  {\n  status:\n  message:\n  }\ndata:\n  [\n  {},\n  {}\n  ]\n}   meta are optional  data always array     Note  Please let us know what serializers you'd like to see     Authentication   Basic HTTP authorization", 
            "title": "Requests"
        }, 
        {
            "location": "/api_specs/#operations", 
            "text": "GET: multiple objects  endpoint: GET /api/ OBJ   optional URL parameters    limit  int  limits rows in the result set  skip  int  skips n rows in the result set  depth  int  nested sets will be loaded (slow)  fields  str  comma separated list of field names - only matching fields will be returned in the data  [field_name]  int|string  queries for fields with matching value    returns  array of objects   HTTP:  GET /api/OBJ  curl:  curl -X GET https://guest:guest@beta.peeringdb.com/api/OBJ  Nested data  Any field ending in the suffix  _set  is a list of objects in a relationship with the parent object, you can expand those lists with the 'depth' parameter as explained below.  The naming schema of the field will always tell you which type of object the set is holding and will correspond with the object's endpoint on the API  object_type _set  So a set called 'net_set' will hold Network objects (api endpoint /net)  Note: unlike GET single, 'depth' here will  ONLY  expand sets, no single relationships will be expanded - this is by design  Depth   0: dont expand anything (default)  1: expand all first level sets to ids  2: expand all first level sets to objects   curl:  curl -X GET https://guest:guest@beta.peeringdb.com/api/OBJ?depth=2  Querying examples  exact:  curl -X GET https://guest:guest@beta.peeringdb.com/api/OBJ?name=something  modifier:  curl -X GET https://guest:guest@beta.peeringdb.com/api/OBJ?name__contains=something  Querying modifiers  numeric fields:   __lt, less than  __lte, less than equal  __gt, greater than  __gte, greater than equal  __in, value inside set of values (comma separated)   string fields:   __contains, field value contains this value  __startswith, field value starts with this value  __in, value inside set of values (comma separated)   GET: single object  endpoint: GET /api/ OBJ / id   required URL parameters     id  int    optional URL parameters     depth  int  nested sets and objects will be expanded   fields  str  comma separated list of field names - only matching fields will be returned in the data    returns  single object in an array   HTTP:  GET /api/OBJ/42  curl:  curl -H \"Accept: application/json\" -X GET https://guest:guest@beta.peeringdb.com/api/OBJ/42  Nested data  Any field ending in the suffix  _set  is a list of objects in a relationship with the parent object, you can expand those lists with the 'depth' parameter as explained below.  The naming schema of the field will always tell you which type of object the set is holding and will correspond with the object's endpoint on the API  object_type _set  So a set called 'net_set' will hold Network objects (api endpoint /net)  Note: unlike GET multiple, 'depth' here will also expand single relationship in addition to sets. So 'net_id' would get expanded into a network object.  unexpanded:  { \n  ...\n  \"net_id\" : 1\n}  expanded:  {\n  ...\n  \"net_id\" : 1\n  \"net\" : {\n     ... network object ...\n  }\n}  Depth   0: dont expand anything (default)  1 to 4: expand all sets and related objects according to level of depth specified   POST: create new object  endpoint: POST /api/ OBJ   required URL parameters    id  int  fields to post in either JSON obj \"{}\" or urlencoded field=value     curl:  curl  -H \"Accept: application/json\" -X POST --data \"{\\\"\"state\"\\\":\\\"active\\\"}\" https://guest:guest@beta.peeringdb.com/api/OBJ  PUT: edit object  endpoint: PUT /api/ OBJ / id   required URL parameters    id  int  fields to post in either JSON obj \"{}\" or urlencoded field=value     HTTP:  PUT /api/OBJ/42  curl:  curl  -H \"Accept: application/json\" -X PUT --data \"{\\\"\"state\"\\\":\\\"active\\\"}\" https://guest:guest@beta.peeringdb.com/api/OBJ/42  DELETE: delete object  endpoint: DELETE /api/ OBJ / id   required URL parameters    id  int     HTTP:  DELETE /api/OBJ/42  curl:  curl -H \"Accept: application/json\" -X DELETE https://guest:guest@beta.peeringdb.com/api/OBJ/42", 
            "title": "Operations"
        }
    ]
}