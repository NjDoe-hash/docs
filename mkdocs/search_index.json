{
    "docs": [
        {
            "location": "/", 
            "text": "PeeringDB 2.0\n\n\nIntroduction\n\n\nGoals\n\n\nThis stage is an introduction to the new RESTful API and RFC on the new schema and interface. Changes are automatically synced from version 1 every hour.\n\n\n\n\nAttention\n\n\nThe MySQL interface \nIS\n going away.\n\nLocal database replication is accomplished with this \ncommand line tool\n, please see the \ndocumentation\n for more information.\n\n\n\n\nWe do not have a specific time frame for moving away from the legacy interface, and will make sure everyone has ample chance to migrate to the JSON interface.\n\n\nTimeline\n\n\nThe next phase will be getting people switched over to the new API and making any changes deemed necessary. Once we've accomplished that, we intend on having the write interface ready to go and can make the switch.\n\n\nChanges from version 1\n\n\n\n\nAll fields are validated (email, IP address, etc), fields not validated are either discarded or put into a notes field.\n\n\nNetwork connections to Internet Exchanges have changed to \"links\" with multiple IP addresses on them\n\n\nNumerous small schema changes\n\n\nAll objects are structured under an Organization with granular access controls\n\n\n\n\nQuick start\n\n\nIf you want to poke around on your own, it's \nreadonly\n at \nhttps://beta.peeringdb.com/\n with self describing API docs at \nhttps://beta.peeringdb.com/apidocs/\n\n\nMore thorough docs are at \nAPI Specs\n, but in a nutshell, just prepend the URL with \napi/\n to get that object in JSON.\n\n\nFor example:\n\n\nhttps://beta.peeringdb.com/net/1\n\nbecomes\n\n\nhttps://beta.peeringdb.com/api/net/1\n\n\nList all via API by taking the \nid\n off:\n\n\nhttps://beta.peeringdb.com/api/net\n\n\nMailing lists\n\n\nWe have changed the way in which PeeringDB will be announcing future enhancements, changes, maintenance windows, and other information. If you would like to be notified of certain events, or participate in certain discussions, please subscribe to one of the following email lists:\n\n\n\n\n\n\nPeeringDB Announce\n\n    All PeeringDB administrative information, such as upgrades,\n\n    maintenances, outages, etc.\n\n\n\n\n\n\nPeeringDB Governance\n\n    Discussion list for PeeringDB governance issues This is a\n\n    community-based effort, the community\u2019s input will help guide the\n\n    future of the PeeringDB (as it has always done).\n\n\n\n\n\n\nPeeringDB Technical\n\n    Discussion of the back end of PeeringDB \n other technical topics\n\n\n\n\n\n\nPeeringDB User-Discuss\n\n    All other list traffic.\n\n\n\n\n\n\nOur goal is to give you all the information you want, and no more.  Please subscribe to any of these lists you feel are appropriate, or none. You will still be able to use the database even if you are not subscribed to any lists.\n\n\n\n\n\n(function(d, s, id) {\n  var js, fjs = d.getElementsByTagName(s)[0];\n  if (d.getElementById(id)) return;\n  js = d.createElement(s); js.id = id;\n  js.src = \"//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.5\";\n  fjs.parentNode.insertBefore(js, fjs);\n}(document, 'script', 'facebook-jssdk'));\n\n\n\n\n\n\n\n\n\n\n\n\nFollow @PeeringDB\n\n\n!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');\n\n\n\n\n\nPresentations\n\n\n\n\nPeeringDB Update\n - Aaron Hughes\n\n  Presented at\n\n\nAPRICOT 2016\n, Auckland, NZ - February 23, 2016 by Aaron Hughes\n\n\nNANOG 66\n, San Diego, CA, US - February 10, 2016 by Aaron Hughes\n\n\n\n\n\n\nPeeringDB Version 2 Coding Introduction\n - Matt Griswold\n\n  Presented at\n\n\nNANOG 66\n, San Diego, CA, US - February 8, 2016 by Matt Griswold\n\n\n\n\n\n\nPeeringDB Version 2 Brazil\n - Matt Griswold / Greg Hankins\n\n  Presented at\n\n\nIX (PTT) F\u00f3rum 9\n, S\u00e3o Paulo, BR - December 8, 2015 by Greg Hankins\n\n\n\n\n\n\nPeeringDB Version 2 Introduction\n - Matt Griswold\n\n  Presented at\n\n\n27th Euro-IX Forum\n, Berlin, DE - October 26, 2015 by Greg Hankins\n\n\nDENOG7\n, Darmstadt, DE - October 30, 2015 by Arnold Nipper \n\n\n\n\n\n\n\n\nHow you can help\n\n\n\n\nCheck your entries and make sure everything looks correct\n\n\nPort any scripts to the new API\n\n\nSend us feedback\n\n\nImprove these docs\n\n\n\n\nReporting Issues\n\n\nStrictly speaking we're really only looking for API bugs and missing or incorrect data right now. The web front end is crude and unpolished and mainly there to view the information without using the API. That said, any reports will be helpful when we get to that (which will be next).\n\n\nYou may view and report issues for version 2 at \nGitHub\n\n\nIf you find incorrect data in version 1 (at www.peeringdb.com), please just email\n\nsupport@peeringdb.com with what should be corrected.\n\n\nQuestions, comments and everything else should go to support@peeringdb.com\n\n\nThanks for the testing/feedback, we look forward to hearing from you!", 
            "title": "Home"
        }, 
        {
            "location": "/#peeringdb-20", 
            "text": "", 
            "title": "PeeringDB 2.0"
        }, 
        {
            "location": "/#introduction", 
            "text": "", 
            "title": "Introduction"
        }, 
        {
            "location": "/#goals", 
            "text": "This stage is an introduction to the new RESTful API and RFC on the new schema and interface. Changes are automatically synced from version 1 every hour.   Attention  The MySQL interface  IS  going away. \nLocal database replication is accomplished with this  command line tool , please see the  documentation  for more information.   We do not have a specific time frame for moving away from the legacy interface, and will make sure everyone has ample chance to migrate to the JSON interface.", 
            "title": "Goals"
        }, 
        {
            "location": "/#timeline", 
            "text": "The next phase will be getting people switched over to the new API and making any changes deemed necessary. Once we've accomplished that, we intend on having the write interface ready to go and can make the switch.", 
            "title": "Timeline"
        }, 
        {
            "location": "/#changes-from-version-1", 
            "text": "All fields are validated (email, IP address, etc), fields not validated are either discarded or put into a notes field.  Network connections to Internet Exchanges have changed to \"links\" with multiple IP addresses on them  Numerous small schema changes  All objects are structured under an Organization with granular access controls", 
            "title": "Changes from version 1"
        }, 
        {
            "location": "/#quick-start", 
            "text": "If you want to poke around on your own, it's  readonly  at  https://beta.peeringdb.com/  with self describing API docs at  https://beta.peeringdb.com/apidocs/  More thorough docs are at  API Specs , but in a nutshell, just prepend the URL with  api/  to get that object in JSON.  For example:  https://beta.peeringdb.com/net/1 \nbecomes  https://beta.peeringdb.com/api/net/1  List all via API by taking the  id  off:  https://beta.peeringdb.com/api/net", 
            "title": "Quick start"
        }, 
        {
            "location": "/#mailing-lists", 
            "text": "We have changed the way in which PeeringDB will be announcing future enhancements, changes, maintenance windows, and other information. If you would like to be notified of certain events, or participate in certain discussions, please subscribe to one of the following email lists:    PeeringDB Announce \n    All PeeringDB administrative information, such as upgrades, \n    maintenances, outages, etc.    PeeringDB Governance \n    Discussion list for PeeringDB governance issues This is a \n    community-based effort, the community\u2019s input will help guide the \n    future of the PeeringDB (as it has always done).    PeeringDB Technical \n    Discussion of the back end of PeeringDB   other technical topics    PeeringDB User-Discuss \n    All other list traffic.    Our goal is to give you all the information you want, and no more.  Please subscribe to any of these lists you feel are appropriate, or none. You will still be able to use the database even if you are not subscribed to any lists.   (function(d, s, id) {\n  var js, fjs = d.getElementsByTagName(s)[0];\n  if (d.getElementById(id)) return;\n  js = d.createElement(s); js.id = id;\n  js.src = \"//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.5\";\n  fjs.parentNode.insertBefore(js, fjs);\n}(document, 'script', 'facebook-jssdk'));      Follow @PeeringDB  !function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');", 
            "title": "Mailing lists"
        }, 
        {
            "location": "/#presentations", 
            "text": "PeeringDB Update  - Aaron Hughes \n  Presented at  APRICOT 2016 , Auckland, NZ - February 23, 2016 by Aaron Hughes  NANOG 66 , San Diego, CA, US - February 10, 2016 by Aaron Hughes    PeeringDB Version 2 Coding Introduction  - Matt Griswold \n  Presented at  NANOG 66 , San Diego, CA, US - February 8, 2016 by Matt Griswold    PeeringDB Version 2 Brazil  - Matt Griswold / Greg Hankins \n  Presented at  IX (PTT) F\u00f3rum 9 , S\u00e3o Paulo, BR - December 8, 2015 by Greg Hankins    PeeringDB Version 2 Introduction  - Matt Griswold \n  Presented at  27th Euro-IX Forum , Berlin, DE - October 26, 2015 by Greg Hankins  DENOG7 , Darmstadt, DE - October 30, 2015 by Arnold Nipper", 
            "title": "Presentations"
        }, 
        {
            "location": "/#how-you-can-help", 
            "text": "Check your entries and make sure everything looks correct  Port any scripts to the new API  Send us feedback  Improve these docs", 
            "title": "How you can help"
        }, 
        {
            "location": "/#reporting-issues", 
            "text": "Strictly speaking we're really only looking for API bugs and missing or incorrect data right now. The web front end is crude and unpolished and mainly there to view the information without using the API. That said, any reports will be helpful when we get to that (which will be next).  You may view and report issues for version 2 at  GitHub  If you find incorrect data in version 1 (at www.peeringdb.com), please just email \nsupport@peeringdb.com with what should be corrected.  Questions, comments and everything else should go to support@peeringdb.com  Thanks for the testing/feedback, we look forward to hearing from you!", 
            "title": "Reporting Issues"
        }, 
        {
            "location": "/gov/", 
            "text": "PeeringDB Governance\n\n\nBoard Meeting Minutes\n\n\n\n\nMarch 4th, 2016\n\n\nFebruary 4th, 2016\n\n\nJanuary 7th, 2016\n\n\nDecember 8th, 2015\n\n\n\n\nFinances\n\n\n\n\nFebruary 24th, 2016: IRS 501(c)(6) Exemption Letter\n\n\nFebruary 23rd, 2016: IRS Form 990-N for 2014\n\n\nFebruary 18th, 2016: IRS Form 990-N for 2015\n\n\nJanuary 7th, 2016: IRS 501(c)(6) Application\n\n\nDecember 31st, 2015: Finance Report\n\n\nDecember 31st, 2014: Finance Report\n\n\n\n\nOrganizational Documents\n\n\n\n\nDecember 16th, 2015: Certificate and Articles of Incorporation\n\n\nDecember 8th, 2015: Organizational Consent\n\n\nDecember 8th, 2015: Bylaws\n\n\nDecember 8th, 2015: Conflict of Interest Policy\n\n\n\n\nSurveys \n Elections\n\n\n\n\nDecember 1st, 2015: Board election results\n\n\nNovember 14th, 2015: Board election voter's guide\n\n\nOctober 20th, 2015: Announcement of survey results and Board election plan\n\n\nAugust, 2015: Survey for future of PeeringDB", 
            "title": "Governance"
        }, 
        {
            "location": "/gov/#peeringdb-governance", 
            "text": "", 
            "title": "PeeringDB Governance"
        }, 
        {
            "location": "/gov/#board-meeting-minutes", 
            "text": "March 4th, 2016  February 4th, 2016  January 7th, 2016  December 8th, 2015", 
            "title": "Board Meeting Minutes"
        }, 
        {
            "location": "/gov/#finances", 
            "text": "February 24th, 2016: IRS 501(c)(6) Exemption Letter  February 23rd, 2016: IRS Form 990-N for 2014  February 18th, 2016: IRS Form 990-N for 2015  January 7th, 2016: IRS 501(c)(6) Application  December 31st, 2015: Finance Report  December 31st, 2014: Finance Report", 
            "title": "Finances"
        }, 
        {
            "location": "/gov/#organizational-documents", 
            "text": "December 16th, 2015: Certificate and Articles of Incorporation  December 8th, 2015: Organizational Consent  December 8th, 2015: Bylaws  December 8th, 2015: Conflict of Interest Policy", 
            "title": "Organizational Documents"
        }, 
        {
            "location": "/gov/#surveys-elections", 
            "text": "December 1st, 2015: Board election results  November 14th, 2015: Board election voter's guide  October 20th, 2015: Announcement of survey results and Board election plan  August, 2015: Survey for future of PeeringDB", 
            "title": "Surveys &amp; Elections"
        }, 
        {
            "location": "/faq/", 
            "text": "FAQ\n\n\nHow do I query by ASN?\n\n\n\n\nYou may type in the ASN in the search box\n\n\nhttp://as12345.b.peeringdb.com\n (subdomain because of HSTS, will go back to normal on release)\n\n\nhttps://beta.peeringdb.com/asn/12345\n\nFor API\n\n\nhttps://beta.peeringdb.com/api/asn/12345\n\n\n\n\nHow do I get a login?\n\n\nYour original level 2 login should work. If your login only had level 1 access in version 1, it is not imported into the version 2 database because there is no difference between unvalidated and read only in version 1. If you want a read only login, you'll have to add it manually once version 2 is released.\n\n\nLogins with level 2 access that are not working in beta should contact \n.\n\n\nHow do the new permissions work?\n\n\nAll entities now have a parent organization, users can be entitled to have read, write, update, create to any entity owned by that organization.\n\n\nAuthenticating via embedded user/pass in the URL\n\n\nSupport for this depends on the client and some browsers have stopped supporting embedded\n\nauthentication in the URL\n\n\nSo for example \n\n\nhttps://\nusername\n:\npassword\n@beta.peeringdb.com/api/net/1\n\n\n\nmay work or it may not depending on the browser you are using.\n\n\nWhy are dates represented as strings in the API?\n\n\nDate strings are ISO 8601 to keep a standard format. Comparison operations such as \n__gt\n, \n__lt\n, etc all still work as expected. For fetching records against updated timestamp, you may also use \n?since=\nseconds since epoch\n\n\nHow do I sync the whole database to my local machine?\n\n\nYou may make a full local copy with \nhttps://github.com/peeringdb/peeringdb-py\n, see docs at \nhttp://peeringdb.github.io/peeringdb-py/cli/\n\n\nInitially it will perform full sync, then it will only do an incremental sync (only updates records that have changed), so you're free to run it as often as you want.", 
            "title": "FAQ"
        }, 
        {
            "location": "/faq/#faq", 
            "text": "", 
            "title": "FAQ"
        }, 
        {
            "location": "/faq/#how-do-i-query-by-asn", 
            "text": "You may type in the ASN in the search box  http://as12345.b.peeringdb.com  (subdomain because of HSTS, will go back to normal on release)  https://beta.peeringdb.com/asn/12345 \nFor API  https://beta.peeringdb.com/api/asn/12345", 
            "title": "How do I query by ASN?"
        }, 
        {
            "location": "/faq/#how-do-i-get-a-login", 
            "text": "Your original level 2 login should work. If your login only had level 1 access in version 1, it is not imported into the version 2 database because there is no difference between unvalidated and read only in version 1. If you want a read only login, you'll have to add it manually once version 2 is released.  Logins with level 2 access that are not working in beta should contact  .", 
            "title": "How do I get a login?"
        }, 
        {
            "location": "/faq/#how-do-the-new-permissions-work", 
            "text": "All entities now have a parent organization, users can be entitled to have read, write, update, create to any entity owned by that organization.", 
            "title": "How do the new permissions work?"
        }, 
        {
            "location": "/faq/#authenticating-via-embedded-userpass-in-the-url", 
            "text": "Support for this depends on the client and some browsers have stopped supporting embedded \nauthentication in the URL  So for example   https:// username : password @beta.peeringdb.com/api/net/1  may work or it may not depending on the browser you are using.", 
            "title": "Authenticating via embedded user/pass in the URL"
        }, 
        {
            "location": "/faq/#why-are-dates-represented-as-strings-in-the-api", 
            "text": "Date strings are ISO 8601 to keep a standard format. Comparison operations such as  __gt ,  __lt , etc all still work as expected. For fetching records against updated timestamp, you may also use  ?since= seconds since epoch", 
            "title": "Why are dates represented as strings in the API?"
        }, 
        {
            "location": "/faq/#how-do-i-sync-the-whole-database-to-my-local-machine", 
            "text": "You may make a full local copy with  https://github.com/peeringdb/peeringdb-py , see docs at  http://peeringdb.github.io/peeringdb-py/cli/  Initially it will perform full sync, then it will only do an incremental sync (only updates records that have changed), so you're free to run it as often as you want.", 
            "title": "How do I sync the whole database to my local machine?"
        }, 
        {
            "location": "/api_specs/", 
            "text": "RESTful API Endpoints and Specifications\n\n\nObject types and tags\n\n\nEach object has an associated short hand tag you can use, current available tags are listed at \nhttps://beta.peeringdb.com/apidocs/\n.\n\n\nRequests\n\n\nURL\n\n\n\n\n\n\nThe URL base appended with \n/api/\n, append with object type and optionally object primary key\n\n\nObject type is not case sensitive.\n\n\nFor example:\n\n\n\n\nhttps://beta.peeringdb.com/api/\nOBJ\n/\nid\n\n\n\n\n\n\n\n\nEncoding\n\n\n\n\n\n\nTo specify the output format, either use the \nAccept:\n HTTP header\n\n\nAccept: application/json\n\n\n\nOr use extension \ntype\n\n\nhttps://beta.peeringdb.com/api/network/42.json\n\n\n\n\n\nJSON\n\n\n\n\nall returns fit into object:\n\n\n{\nmeta:\n  {\n  status:\n  message:\n  }\ndata:\n  [\n  {},\n  {}\n  ]\n}\n\n\n\n\n\nmeta are optional\n\n\ndata always array \n\n\n\n\n\n\nNote\n\n\nPlease let us know what serializers you'd like to see\n\n\n\n\n\n\n\n\nAuthentication\n\n\n\n\nBasic HTTP authorization\n\n\n\n\nIn order to access the api as a guest simply omit any authentication\n\n\nOperations\n\n\nGET: multiple objects\n\n\nendpoint: GET /api/\nOBJ\n\n\n\n\noptional URL parameters\n\n\n\n\n\n\nlimit \nint\n limits rows in the result set\n\n\nskip \nint\n skips n rows in the result set\n\n\ndepth \nint\n nested sets will be loaded (slow)\n\n\nfields \nstr\n comma separated list of field names - only matching fields will be returned in the data\n\n\nsince \nint\n retrieve all objects updated since specified time (unix timestamp, seconds)\n\n\n[field_name] \nint|string\n queries for fields with matching value\n\n\n\n\n\n\nreturns\n\n\narray of objects\n\n\n\n\nHTTP:\n\n\nGET /api/OBJ\n\n\n\ncurl:\n\n\ncurl -X GET https://\nusername\n:\npassword\n@beta.peeringdb.com/api/OBJ\n\n\n\nNested data\n\n\nAny field ending in the suffix \n_set\n is a list of objects in a relationship with the parent object, you can expand those lists with the 'depth' parameter as explained below.\n\n\nThe naming schema of the field will always tell you which type of object the set is holding and will correspond with the object's endpoint on the API\n\n\nobject_type\n_set\n\n\n\nSo a set called 'net_set' will hold Network objects (api endpoint /net)\n\n\nNote: unlike GET single, 'depth' here will \nONLY\n expand sets, no single relationships will be expanded - this is by design\n\n\nDepth\n\n\n\n\n0: dont expand anything (default)\n\n\n1: expand all first level sets to ids\n\n\n2: expand all first level sets to objects\n\n\n\n\ncurl:\n\n\ncurl -X GET https://\nusername\n:\npassword\n@beta.peeringdb.com/api/OBJ?depth=2\n\n\n\nQuerying examples\n\n\nexact:\n\n\ncurl -X GET https://\nusername\n:\npassword\n@beta.peeringdb.com/api/OBJ?name=something\n\n\n\nmodifier:\n\n\ncurl -X GET https://\nusername\n:\npassword\n@beta.peeringdb.com/api/OBJ?name__contains=something\n\n\n\nQuerying modifiers\n\n\nnumeric fields:\n\n\n\n\n__lt, less than\n\n\n__lte, less than equal\n\n\n__gt, greater than\n\n\n__gte, greater than equal\n\n\n__in, value inside set of values (comma separated)\n\n\n\n\nstring fields:\n\n\n\n\n__contains, field value contains this value\n\n\n__startswith, field value starts with this value\n\n\n__in, value inside set of values (comma separated)\n\n\n\n\nSince\n\n\nYou can use the since argument with a unix timestamp (seconds) to retrieve all\n\nobjects updated since then. Note that this result will contain objects that were\n\ndeleted in that timeframe as well - you can spot them by checking for status \"deleted\"\n\n\n?since=1443414678\n\n\n\nGET: single object\n\n\nendpoint: GET /api/\nOBJ\n/\nid\n\n\n\n\nrequired URL parameters\n\n\n\n\n\n\n\n\nid \nint\n\n\n\n\n\n\noptional URL parameters\n\n\n\n\n\n\n\n\ndepth \nint\n nested sets and objects will be expanded \n\n\nfields \nstr\n comma separated list of field names - only matching fields will be returned in the data\n\n\n\n\n\n\nreturns\n\n\nsingle object in an array\n\n\n\n\nHTTP:\n\n\nGET /api/OBJ/42\n\n\n\ncurl:\n\n\ncurl -H \"Accept: application/json\" -X GET https://\nusername\n:\npassword\n@beta.peeringdb.com/api/OBJ/42\n\n\n\nNested data\n\n\nAny field ending in the suffix \n_set\n is a list of objects in a relationship with the parent object, you can expand those lists with the 'depth' parameter as explained below.\n\n\nThe naming schema of the field will always tell you which type of object the set is holding and will correspond with the object's endpoint on the API\n\n\nobject_type\n_set\n\n\n\nSo a set called 'net_set' will hold Network objects (api endpoint /net)\n\n\nNote: unlike GET multiple, 'depth' here will also expand single relationship in addition to sets. So 'net_id' would get expanded into a network object.\n\n\nunexpanded:\n\n\n{ \n  ...\n  \"net_id\" : 1\n}\n\n\n\nexpanded:\n\n\n{\n  ...\n  \"net_id\" : 1\n  \"net\" : {\n     ... network object ...\n  }\n}\n\n\n\nDepth\n\n\n\n\n0: dont expand anything (default)\n\n\n1 to 4: expand all sets and related objects according to level of depth specified\n\n\n\n\nPOST: create new object\n\n\nendpoint: POST /api/\nOBJ\n\n\n\n\nrequired URL parameters\n\n\n\n\n\n\nid \nint\n\n\nfields to post in either JSON obj \"{}\" or urlencoded field=value\n\n\n\n\n\n\n\n\ncurl:\n\n\ncurl  -H \"Accept: application/json\" -X POST --data \"{\\\"\"state\"\\\":\\\"active\\\"}\" https://\nusername\n:\npassword\n@beta.peeringdb.com/api/OBJ\n\n\n\nPUT: edit object\n\n\nendpoint: PUT /api/\nOBJ\n/\nid\n\n\n\n\nrequired URL parameters\n\n\n\n\n\n\nid \nint\n\n\nfields to post in either JSON obj \"{}\" or urlencoded field=value\n\n\n\n\n\n\n\n\nHTTP:\n\n\nPUT /api/OBJ/42\n\n\n\ncurl:\n\n\ncurl  -H \"Accept: application/json\" -X PUT --data \"{\\\"\"state\"\\\":\\\"active\\\"}\" https://\nusername\n:\npassword\n@beta.peeringdb.com/api/OBJ/42\n\n\n\nDELETE: delete object\n\n\nendpoint: DELETE /api/\nOBJ\n/\nid\n\n\n\n\nrequired URL parameters\n\n\n\n\n\n\nid \nint\n\n\n\n\n\n\n\n\nHTTP:\n\n\nDELETE /api/OBJ/42\n\n\n\ncurl:\n\n\ncurl -H \"Accept: application/json\" -X DELETE https://\nusername\n:\npassword\n@beta.peeringdb.com/api/OBJ/42", 
            "title": "API Specs"
        }, 
        {
            "location": "/api_specs/#restful-api-endpoints-and-specifications", 
            "text": "", 
            "title": "RESTful API Endpoints and Specifications"
        }, 
        {
            "location": "/api_specs/#object-types-and-tags", 
            "text": "Each object has an associated short hand tag you can use, current available tags are listed at  https://beta.peeringdb.com/apidocs/ .", 
            "title": "Object types and tags"
        }, 
        {
            "location": "/api_specs/#requests", 
            "text": "", 
            "title": "Requests"
        }, 
        {
            "location": "/api_specs/#url", 
            "text": "The URL base appended with  /api/ , append with object type and optionally object primary key  Object type is not case sensitive.  For example:   https://beta.peeringdb.com/api/ OBJ / id", 
            "title": "URL"
        }, 
        {
            "location": "/api_specs/#encoding", 
            "text": "To specify the output format, either use the  Accept:  HTTP header  Accept: application/json  Or use extension  type  https://beta.peeringdb.com/api/network/42.json   JSON   all returns fit into object:  {\nmeta:\n  {\n  status:\n  message:\n  }\ndata:\n  [\n  {},\n  {}\n  ]\n}   meta are optional  data always array     Note  Please let us know what serializers you'd like to see", 
            "title": "Encoding"
        }, 
        {
            "location": "/api_specs/#authentication", 
            "text": "Basic HTTP authorization   In order to access the api as a guest simply omit any authentication", 
            "title": "Authentication"
        }, 
        {
            "location": "/api_specs/#operations", 
            "text": "", 
            "title": "Operations"
        }, 
        {
            "location": "/api_specs/#get-multiple-objects", 
            "text": "endpoint: GET /api/ OBJ   optional URL parameters    limit  int  limits rows in the result set  skip  int  skips n rows in the result set  depth  int  nested sets will be loaded (slow)  fields  str  comma separated list of field names - only matching fields will be returned in the data  since  int  retrieve all objects updated since specified time (unix timestamp, seconds)  [field_name]  int|string  queries for fields with matching value    returns  array of objects   HTTP:  GET /api/OBJ  curl:  curl -X GET https:// username : password @beta.peeringdb.com/api/OBJ", 
            "title": "GET: multiple objects"
        }, 
        {
            "location": "/api_specs/#nested-data", 
            "text": "Any field ending in the suffix  _set  is a list of objects in a relationship with the parent object, you can expand those lists with the 'depth' parameter as explained below.  The naming schema of the field will always tell you which type of object the set is holding and will correspond with the object's endpoint on the API  object_type _set  So a set called 'net_set' will hold Network objects (api endpoint /net)  Note: unlike GET single, 'depth' here will  ONLY  expand sets, no single relationships will be expanded - this is by design", 
            "title": "Nested data"
        }, 
        {
            "location": "/api_specs/#depth", 
            "text": "0: dont expand anything (default)  1: expand all first level sets to ids  2: expand all first level sets to objects   curl:  curl -X GET https:// username : password @beta.peeringdb.com/api/OBJ?depth=2", 
            "title": "Depth"
        }, 
        {
            "location": "/api_specs/#querying-examples", 
            "text": "exact:  curl -X GET https:// username : password @beta.peeringdb.com/api/OBJ?name=something  modifier:  curl -X GET https:// username : password @beta.peeringdb.com/api/OBJ?name__contains=something", 
            "title": "Querying examples"
        }, 
        {
            "location": "/api_specs/#querying-modifiers", 
            "text": "numeric fields:   __lt, less than  __lte, less than equal  __gt, greater than  __gte, greater than equal  __in, value inside set of values (comma separated)   string fields:   __contains, field value contains this value  __startswith, field value starts with this value  __in, value inside set of values (comma separated)", 
            "title": "Querying modifiers"
        }, 
        {
            "location": "/api_specs/#since", 
            "text": "You can use the since argument with a unix timestamp (seconds) to retrieve all \nobjects updated since then. Note that this result will contain objects that were \ndeleted in that timeframe as well - you can spot them by checking for status \"deleted\"  ?since=1443414678", 
            "title": "Since"
        }, 
        {
            "location": "/api_specs/#get-single-object", 
            "text": "endpoint: GET /api/ OBJ / id   required URL parameters     id  int    optional URL parameters     depth  int  nested sets and objects will be expanded   fields  str  comma separated list of field names - only matching fields will be returned in the data    returns  single object in an array   HTTP:  GET /api/OBJ/42  curl:  curl -H \"Accept: application/json\" -X GET https:// username : password @beta.peeringdb.com/api/OBJ/42", 
            "title": "GET: single object"
        }, 
        {
            "location": "/api_specs/#nested-data_1", 
            "text": "Any field ending in the suffix  _set  is a list of objects in a relationship with the parent object, you can expand those lists with the 'depth' parameter as explained below.  The naming schema of the field will always tell you which type of object the set is holding and will correspond with the object's endpoint on the API  object_type _set  So a set called 'net_set' will hold Network objects (api endpoint /net)  Note: unlike GET multiple, 'depth' here will also expand single relationship in addition to sets. So 'net_id' would get expanded into a network object.  unexpanded:  { \n  ...\n  \"net_id\" : 1\n}  expanded:  {\n  ...\n  \"net_id\" : 1\n  \"net\" : {\n     ... network object ...\n  }\n}", 
            "title": "Nested data"
        }, 
        {
            "location": "/api_specs/#depth_1", 
            "text": "0: dont expand anything (default)  1 to 4: expand all sets and related objects according to level of depth specified", 
            "title": "Depth"
        }, 
        {
            "location": "/api_specs/#post-create-new-object", 
            "text": "endpoint: POST /api/ OBJ   required URL parameters    id  int  fields to post in either JSON obj \"{}\" or urlencoded field=value     curl:  curl  -H \"Accept: application/json\" -X POST --data \"{\\\"\"state\"\\\":\\\"active\\\"}\" https:// username : password @beta.peeringdb.com/api/OBJ", 
            "title": "POST: create new object"
        }, 
        {
            "location": "/api_specs/#put-edit-object", 
            "text": "endpoint: PUT /api/ OBJ / id   required URL parameters    id  int  fields to post in either JSON obj \"{}\" or urlencoded field=value     HTTP:  PUT /api/OBJ/42  curl:  curl  -H \"Accept: application/json\" -X PUT --data \"{\\\"\"state\"\\\":\\\"active\\\"}\" https:// username : password @beta.peeringdb.com/api/OBJ/42", 
            "title": "PUT: edit object"
        }, 
        {
            "location": "/api_specs/#delete-delete-object", 
            "text": "endpoint: DELETE /api/ OBJ / id   required URL parameters    id  int     HTTP:  DELETE /api/OBJ/42  curl:  curl -H \"Accept: application/json\" -X DELETE https:// username : password @beta.peeringdb.com/api/OBJ/42", 
            "title": "DELETE: delete object"
        }
    ]
}