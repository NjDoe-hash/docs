{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About PeeringDB How can PeeringDB help me to interconnect? Create and account and register in PeeringDB to get started. Getting help Please log bugs and feature requests at GitHub . Several PeeringDB mailing lists are listed below. Questions, comments and everything else should go to . Mailing lists We have changed the way in which PeeringDB will be announcing future enhancements, changes, maintenance windows, and other information. If you would like to be notified of certain events, or participate in certain discussions, please subscribe to one of the following email lists: PeeringDB Announce All PeeringDB administrative announcement information, such as upgrades, maintenances, outages, etc. PeeringDB Governance Discussion list for PeeringDB governance issues. This is a community-based effort, the community\u2019s input will help guide the future of the PeeringDB as it has always done. PeeringDB Technical Discussion about PeeringDB atechnical topics. PeeringDB Translate Discussions about PeeringDB translations. PeeringDB User-Discuss All other topics. Our goal is to give you all the information you want, and no more. Please subscribe to any of these lists you feel are appropriate, or none. You will still be able to use the database even if you are not subscribed to any lists. Quick start PeeringDB is available at https://www.peeringdb.com/ with self-describing API docs at https://www.peeringdb.com/apidocs/ . More thorough docs are at API Specs , but in a nutshell, just prepend the URL with api/ to get that object in JSON. For example: https://www.peeringdb.com/net/1 becomes: https://www.peeringdb.com/api/net/1 List all via API by taking the id off: https://www.peeringdb.com/api/net Local database replication is accomplished with this command line tool , please see the documentation for more information. Release notes The release notes list the GitHub issues and a summary of what has changed in PeeringDB software releases. Guides [es] Gu\u00eda corta para uso de peeringdb.com - Fabi\u00e1n Mej\u00eda [pt-BR] Guia de cadastro de informa\u00e7\u00f5es de ASNs no PeeringDB - Julimar Lunguinho Mendes / Equipe de Engenharia [pt-BR] Guia de cadastro de informa\u00e7\u00f5es de Facilities no PeeringDB - Julimar Lunguinho Mendes / Equipe de Engenharia Tutorials and workshops PeeringDB Tutorial, learning the GUI and the API at APRICOT 2020 , Melbourne, AU - February 20, 2020 - Arnold Nipper How is PeeringDB organised? and The PeeringDB API at DENOG11 , Hamburg, DE - November 10, 2019 - Arnold Nipper PeeringDB Workshop at AfPIF-10 , Balaclava, MV - August 20, 2019 - Arnold Nipper ( video starts at 14:00) Part 1: Intro , Part 2: Main , Part 3: API at APRICOT 2019 , Daejeon, KR - February 27, 2018 - Arnold Nipper ( video ) Presentations 2020 Data Ownership Policy Implementation Presentation - August 17, 2020 - Filiz Yilmaz, Steve McManus, Arnold Nipper ( video ) PeeringDB Data Ownership Task Force at PeeringDB Annual Meeting 2020 - April 17, 2020 - Filiz Yilmaz PeeringDB at ABRINT na Estrada Campo Grande , Campo Grande, BR - March 10, 2020 - Julimar Lunguinho Mendes PeeringDB Update at PhNOG 2020 , Manila, PH - February 26, 2020 - Arnold Nipper PeeringDB Update at APRICOT 2020 , Melbourne, AU - February 19, 2020 - Arnold Nipper Introducci\u00f3n a PeeringDB at Seguridad en el Ruteo: MANRS para Operadores de Red de Universidades , - October 2, 2020 - Diego Dominguez 2019 PeeringDB Update (English)/ \u041d\u043e\u0432\u043e\u0441\u0442\u0438 \u043e\u0442 PeeringDB (P\u0443\u0441\u0441\u043a\u0438\u0439) at MSK-IX Peering Forum 2019 , Moscow, RU - December 5, 2019 - Filiz Yilmaz PeeringDB - Como Est\u00e1 a Ado\u00e7\u00e3o no Brasil at MUM in Brazil , Foz do Igua\u00e7u, BR - November 29, 2019 - Julimar Lunguinho Mendes PeeringDB Para Que Sirve? at XII Encuentro Nacional de T\u00e9cnicos , Salta, AR - November 28, 2019 - Hernan Moguilevsky PeeringDB Update: A Look Into PeeringDB's Data for AT/CH/DE/LU and the Latest Changes at DENOG11 , Hamburg, DE - November 12, 2019 - Stefan Funke PeeringDB Update at Peering Asia 3.0 , Kuala Lumpur, MY - November 7, 2019 - Arnold Nipper PeeringDB Update at ATNOG 2019/2 , Vienna, AT - November 5, 2019 - Stefan Funke Introduction to PeeringDB at JBIX Peering Forum 2019 , Kuala Lumpur, MY - November 5, 2019 - Arnold Nipper Introduction to PeeringDB at ngNOG 2019 , Lagos, NG - October 30, 2019 - Ben Ryall Cadastro para participantes do IX.br at IX F\u00f3rum Regional , Florian\u00f3polis, BR - October 25, 2019 - Julimar Lunguinho Mendes OAuth for IXP Operators at the 35th Euro-IX Forum , Zaandam, NL - October 21, 2019 - Barry O'Donovan The PeeringDB API at the 35th Euro-IX Forum , Zaandam, NL - October 21, 2019 - Arnold Nipper Introduction to PeeringDB at RONOG 6 , Bucharest, RO - October 1, 2019 - Arnold Nipper PeeringDB Update at EPF14 , Tallinn, EE - September 18, 2019 - Filiz Yilmaz Cadastro para participantes do IX.br at IX F\u00f3rum Regional , Natal, BR - September 6, 2019 - Julimar Lunguinho Mendes Introduction to PeeringDB at SAFNOG-5 , Johannesburg, ZA - August 28, 2019 - Arnold Nipper Introduction to PeeringDB at AfPIF-10 , Balaclava, MV - August 22, 2019 - Arnold Nipper Introducci\u00f3n a PeeringDB at MexNOG 2019 , Mexico City, MX - August 14, 2019 - Diego Dominguez Introduction to PeeringDB at ATNOG 2019/1 , Salzburg, AT - July 16, 2019 - Arnold Nipper Introduction to PeeringDB at INNOG 2 , New Delhi, IN - July 1, 2019 - Arnold Nipper ( video ) Cadastro para participantes do IX.br at IX F\u00f3rum Regional , S\u00e3o Paulo, BR - June 10, 2019 - Julimar Lunguinho Mendes News from PeeringDB at ENOG 16 , Tbilisi, GE - June 3, 2019 - Arnold Nipper PeeringDB Update at NONOG-3 , Oslo, NO - May 27, 2019 - Arnold Nipper PeeringDB Update at SINOG 6.0 , Ljubljana, SI - May 14, 2019 - Arnold Nipper Introduction to PeeringDB at BKNIX Peering Forum and ThaiNOG Day 2019 , Bangkok, TH - May 7, 2019 - Arnold Nipper Use in Latin America at Peering Forum LAC , Punta Cana, DR - May 6, 2019 - Julimar Lunguinho Mendes and Carlos Martinez Cagnazzo Cadastro para participantes do IX.br at IX F\u00f3rum Regional , Campo Grande, BR - April 26, 2019 - Julimar Lunguinho Mendes Introduction to PeeringDB at Telecom Day , St. Petersburg, RU - April 19, 2019 - Arnold Nipper PeeringDB Update at SEE 8 , Sarajevo, BH - April 17, 2019 - Arnold Nipper PeeringDB Update at Curso Avan\u00e7ado de IPv6 , S\u00e3o Paulo, BR - April 5, 2019 - Julimar Lunguinho Mendes PeeringDB Update at BCIX Round Table April 2019 , Berlin, DE - April 4, 2019 - Stefan Funke PeeringDB Update at MENOG 19 , Beirut, LB - April 3, 2019 - Arnold Nipper PeeringDB Update at DKNOG9 , Copenhagen, DK - March 15, 2019 - Arnold Nipper PeeringDB Update at Peering Days 2019 , Zagreb, CR - March 12, 2019 - Arnold Nipper PeeringDB Update at PhNOG 2019 , Cebu, PH - March 8, 2019 - Arnold Nipper PeeringDB Update at HKNOG 7.0 , Hong Kong, HK - March 1, 2019 - Arnold Nipper 2018 PeeringDB Update at MSK-IX Peering Forum 2018 , Moscow, RU - November 23, 2018 - Rebecca Stani\u0107 PeeringDB Update at DENOG10 , Darmstadt, DE - November 21, 2018 - Arnold Nipper PeeringDB Update at ITNOG4 , Bologna, IT - November 9, 2018 - Arnold Nipper Introduction to PeeringDB API at the 33rd Euro-IX Forum , Venice, IT - November 6, 2018 - Arnold Nipper PeeringDB Introduction at ngNOG 2018 , Lagos, NG - October 31, 2018 - Ben Ryall PeeringDB Update at SwiNOG #34 , Berne, CH - October 30, 2018 - Arnold Nipper PeeringDB Update and Japanese Localization Experience at Peering Asia 2.0 , Hong Kong, HK - October 25, 2018 - Arnold Nipper and Masataka Mawatari PeeringDB Update at SAFNOG-4/EANOG/tzNOG , Dar es Salaam, TZ - September 25, 2018 - Arnold Nipper PeeringDB Update at EPF 13 , Athens, GR - September 18, 2018 - Rebecca Stani\u0107 Cadastro para participantes do IX.br at IX (PTT) F\u00f3rum Regional , Natal, BR - September 14, 2018 - Julimar Lunguinho Mendes PeeringDB Frontend Translation Project at APNIC 46 , Noumea, NC - September 12, 2018 - Masataka Mawatari PeeringDB Update at AfPIF2018 , Cape Town, ZA - August 23, 2018 - Arnold Nipper PeeringDB for IXes at AFIX , Cape Town, ZA - August 20, 2018 - Arnold Nipper Introduction to PeeringDB API at SANOG 32 , Dhaka, BD - August 10, 2018 - Arnold Nipper PeeringDB Update at SANOG 32 , Dhaka, BD - August 9, 2018 - Arnold Nipper PeeringDB: What is it, how to and benefits at New England Peering Forum 2018 , Cambridge, MA, US - June 22, 2018 - Patrick W. Gilmore PeeringDB Update at SEE 7 , Timi\u0219oara, R0 - June 18, 2018 - Arnold Nipper PeeringDB Update at ENOG 15 , Moscow, RU - June 5, 2018 - Arnold Nipper PeeringDB Update at SwiNOG 33 , Berne, CH - May 24, 2018 - Arnold Nipper PeeringDB Update e cadastro de Facilities at GTER 45 , Florian\u00f3polis, BR - May 22, 2018 - Julimar Lunguinho Mendes ( video ) PeeringDB Update at RIPE 76 Connect Working Group , Marseille, FR - May 16, 2018 - Arnold Nipper ( video ) PeeringDB Update at African Internet Summit 2018 , Dakar, SN - May 8, 2018 - Arnold Nipper PeeringDB Update at DKNOG8 , Copenhagen, DK - March 9, 2018 - Arnold Nipper PeeringDB Update at CEE Peering Days 2018 , Berlin, DE - March 7, 2018 - Arnold Nipper Introduction to PeeringDB at APRICOT 2018 , Kathmandu, NP - February 26, 2018 - Arnold Nipper PeeringDB Update at APIX Meeting #17 , Kathmandu, NP - February 24, 2018 - Arnold Nipper PeeringDB Introduction at Capacity India SAARC 2018 , New Delhi, IN - February 8, 2018 - Arnold Nipper 2017 PeeringDB Update at NIX.cz Member Meering , Prague, CZ - November 23, 2017 - Bijal Sanghani PeeringDB Update at DENOG9 , Darmstadt, DE - November 23, 2017 - Arnold Nipper PeeringDB Update at ALNOF , Tirana, AL - November 14, 2017 - Bijal Sanghani PeeringDB Update at Peering Asia 1.0 , Kyoto, JP - November 1, 2017 - Arnold Nipper PeeringDB Update at TOP-IX Meeting , Torino, IT - September 26, 2017 - Bijal Sanghani PeeringDB Update at NPD 17 , The Hague, NL - September 15, 2017 - Arnold Nipper PeeringDB Update at SAFNOG-3 , Durban, ZA - September 6, 2017 - Arnold Nipper PeeringDB Update at AfPIF 2017 , Abidjan, CI - August 24, 2017 - Arnold Nipper PeeringDB Update at SANOG 30 Peering Forum, Gurgaon, IN - July 10, 2017 - Arnold Nipper More benefits from PeeringDB at DE-CIX Technical Meeting , Frankfurt, DE - June 22, 2017 - Arnold Nipper PeeringDB Update at NANOG 70 , Bellevue, WA, US - June 5, 2017 - Aaron Hughes PeeringDB Update at BOSNOG Meeting IX Peering Forum , Cambridge, MA, US - June 2, 2017 - Stephen McManus Orienta\u00e7\u00f5es no preenchimento de participantes do IX.br at GTER 43 , Foz do Igua\u00e7u, BR - May 25, 2017 - Julimar Lunguinho Mendes PeeringDB Update at ENOG 13.0 , Saint Petersburg, RU - May 23, 2017 - Arnold Nipper PeeringDB Update at Global Peering Forum 12.0 , New York, NY, US - April 26, 2017 - Aaron Huges PeeringDB at GORE/ESNOG Reunion 19 , Barcelona, ES - April 6, 2017 - Arnold Nipper PeeringDB at CEE Peering Days 2017 , Ljubljana, SL - March 23, 2017 - Arnold Nipper PeeringDB 2.0 at APRICOT 2017 , Ho Chi Minh City, VN - February 28, 2017 - Arnold Nipper 2016 PeeringDB at 19 KIKE Conference , Serock, PL - November 23, 2016 - Robert Jakub PeeringDB 2.0 at ITNOG2 , Bologna, IT - November 3, 2016 - Arnold Nipper PeeringDB Product Committee Charter Survey at EPF 11 , Sofia, BG - September 20, 2016 - Eric Loos PeeringDB 2.0 at NPD 16 , The Hague, NL - September 16, 2016 - Walt Wollny PeeringDB 2.0 at AfPIF 2016 , Dar es Salaam, TZ - August 30, 2016 - Arnold Nipper PeeringDB 2.0 for IXPs at AFIX 2016 , Dar es Salaam, TZ - August 29, 2016 - Arnold Nipper PeeringDB 2.0 at ENOG 11 , Moscow, RU - June 7, 2016 - Arnold Nipper PeeringDB 2.0 at RIPE 72 , Copenhagen, DK - May 25, 2016 - Greg Hankins PeeringDB 2.0 at CHI-NOG 06 , Chicago, IL, US - May 12, 2016 - Matt Griswold PeeringDB 2.0 e o Cen\u00e1rio Brasileiro and IX.br Guia de cadastro de informa\u00e7\u00f5es de ASNs no PeeringDB at GTER 41 , Uberl\u00e2ndia, BR - May 12, 2016 - Eduardo Ascen\u00e7o Reis PeeringDB 2.0 for IXPs at 28th Euro-IX Forum , Luxembourg, LU - April 26, 2016 - Greg Hankins / Arnold Nipper RIPE SEE 5 , Tirana, AL - April 19, 2016 - Arnold Nipper PeeringDB 2.0 at UKNOF34 , Manchester, UK - April 21, 2016 - Greg Hankins PeeringDB Update at GPF 11 , Los Angeles, CA, US - April 13, 2016 - Aaron Hughes NetNod , Stockholm, SE - March 17, 2016 - Job Snijders DKNOG6 , Copenhagen, DK - March 10, 2016 - Job Snijders PeeringDB Update - Aaron Hughes APRICOT 2016 , Auckland, NZ - February 23, 2016 - Aaron Hughes NANOG 66 , San Diego, CA, US - February 10, 2016 - Aaron Hughes PeeringDB Version 2 Coding Introduction at NANOG 66 , San Diego, CA, US - February 8, 2016 - Matt Griswold 2015 PeeringDB Version 2 Brazil - Matt Griswold / Greg Hankins IX (PTT) F\u00f3rum 9 , S\u00e3o Paulo, BR - December 8, 2015 - Greg Hankins PeeringDB Version 2 Introduction - Matt Griswold 27th Euro-IX Forum , Berlin, DE - October 26, 2015 - Greg Hankins DENOG7 , Darmstadt, DE - October 30, 2015 - Arnold Nipper Tools This section lists tools for using PeeringDB, and tools that use PeeringDB. django-peeringdb is a Django library with a local PeeringDB database sync. It defines the database schema to create a local database copy. The library is easy to integrate into a common framework for local tools and custom interfaces, and also supports multiple database engines (MySQL, Postgres, SQLite). The Isolario project improve knowledge about the AS-level ecosystem of the Internet by increasing the amount of Autonomous Systems (ASes) from which BGP data is collected. Isolario offers network operators services based on the real-time analysis of inter-domain routing from different points of view in return for full routing tables. Ixgen is yet another open source, multiplatform peering configuration generator that is based on the PeeringDB API. It can also run its own server for faster results. Ixgen is configured using an INI- or JSON-style format, and produces custom template-driven or fixed JSON-style configurations, peeringdb-py is a Python client for PeeringDB. It features functions to get objects and display them in JSON or YAML format, and provides a whois-like display of records. The client also has an integrated local database sync, and provides a Python library for integration with custom tools. Some examples are available too. Pinder is a tool that facilitates peering. If peering is desired between two networks, and you're happy to just configure sessions without a commercial agreement, Pinder acts as the middle man. You can submit the request via either a basic web UI or an API, and the other network is notified or can periodically check their outstanding requests. If both network agree to peer, they are notified to configure a session. Once both networks indicate that sessions are configured and established, the request is then deleted. A brief slide deck explains the functionality in more detail. Search in PeeringDB is a Chrome extension to search for ASNs, networks, and IXs in PeeringDB using the context menu. TraceMON is a tool for visualizing a network topology generated by traceroutes that provides one-click access to IXP and network information. It also displays PeeringDB information and allows the user to update their record. RIPE Atlas users can access it by selecting a traceroute measurement and clicking on the TraceMON tab. Open source Source code audit PeeringDB commissioned a full audit of PeeringDB's source code in 2018. Computest (the auditor) prepared a Third Pary Memo , this memo provides a high level overview of the outcome of the source code audit. The report is available here . Beta development The PeeringDB beta server is running the latest beta software version, with full access over HTTP and the API. Note that changes made to the beta database are local to the beta server only, and are not reflected on the production servers. The latest changes to PeeringDB automagically redirects to the list of issues on PeeringDB's GitHub repository that document all of the changes in the current beta version. Historical data MySQL dumps from July, 29 2010 to March 14, 2016 are archived by CAIDA at http://data.caida.org/datasets/peeringdb-v1/ . How you can help Check your entries and make sure everything looks correct Port any scripts to the new API Send us feedback Improve these docs Add or improve a translation Thanks for your feedback, we look forward to hearing from you!","title":"About"},{"location":"#about-peeringdb","text":"","title":"About PeeringDB"},{"location":"#how-can-peeringdb-help-me-to-interconnect","text":"Create and account and register in PeeringDB to get started.","title":"How can PeeringDB help me to interconnect?"},{"location":"#getting-help","text":"Please log bugs and feature requests at GitHub . Several PeeringDB mailing lists are listed below. Questions, comments and everything else should go to .","title":"Getting help"},{"location":"#mailing-lists","text":"We have changed the way in which PeeringDB will be announcing future enhancements, changes, maintenance windows, and other information. If you would like to be notified of certain events, or participate in certain discussions, please subscribe to one of the following email lists: PeeringDB Announce All PeeringDB administrative announcement information, such as upgrades, maintenances, outages, etc. PeeringDB Governance Discussion list for PeeringDB governance issues. This is a community-based effort, the community\u2019s input will help guide the future of the PeeringDB as it has always done. PeeringDB Technical Discussion about PeeringDB atechnical topics. PeeringDB Translate Discussions about PeeringDB translations. PeeringDB User-Discuss All other topics. Our goal is to give you all the information you want, and no more. Please subscribe to any of these lists you feel are appropriate, or none. You will still be able to use the database even if you are not subscribed to any lists.","title":"Mailing lists"},{"location":"#quick-start","text":"PeeringDB is available at https://www.peeringdb.com/ with self-describing API docs at https://www.peeringdb.com/apidocs/ . More thorough docs are at API Specs , but in a nutshell, just prepend the URL with api/ to get that object in JSON. For example: https://www.peeringdb.com/net/1 becomes: https://www.peeringdb.com/api/net/1 List all via API by taking the id off: https://www.peeringdb.com/api/net Local database replication is accomplished with this command line tool , please see the documentation for more information.","title":"Quick start"},{"location":"#release-notes","text":"The release notes list the GitHub issues and a summary of what has changed in PeeringDB software releases.","title":"Release notes"},{"location":"#guides","text":"[es] Gu\u00eda corta para uso de peeringdb.com - Fabi\u00e1n Mej\u00eda [pt-BR] Guia de cadastro de informa\u00e7\u00f5es de ASNs no PeeringDB - Julimar Lunguinho Mendes / Equipe de Engenharia [pt-BR] Guia de cadastro de informa\u00e7\u00f5es de Facilities no PeeringDB - Julimar Lunguinho Mendes / Equipe de Engenharia","title":"Guides"},{"location":"#tutorials-and-workshops","text":"PeeringDB Tutorial, learning the GUI and the API at APRICOT 2020 , Melbourne, AU - February 20, 2020 - Arnold Nipper How is PeeringDB organised? and The PeeringDB API at DENOG11 , Hamburg, DE - November 10, 2019 - Arnold Nipper PeeringDB Workshop at AfPIF-10 , Balaclava, MV - August 20, 2019 - Arnold Nipper ( video starts at 14:00) Part 1: Intro , Part 2: Main , Part 3: API at APRICOT 2019 , Daejeon, KR - February 27, 2018 - Arnold Nipper ( video )","title":"Tutorials and workshops"},{"location":"#presentations","text":"","title":"Presentations"},{"location":"#2020","text":"Data Ownership Policy Implementation Presentation - August 17, 2020 - Filiz Yilmaz, Steve McManus, Arnold Nipper ( video ) PeeringDB Data Ownership Task Force at PeeringDB Annual Meeting 2020 - April 17, 2020 - Filiz Yilmaz PeeringDB at ABRINT na Estrada Campo Grande , Campo Grande, BR - March 10, 2020 - Julimar Lunguinho Mendes PeeringDB Update at PhNOG 2020 , Manila, PH - February 26, 2020 - Arnold Nipper PeeringDB Update at APRICOT 2020 , Melbourne, AU - February 19, 2020 - Arnold Nipper Introducci\u00f3n a PeeringDB at Seguridad en el Ruteo: MANRS para Operadores de Red de Universidades , - October 2, 2020 - Diego Dominguez","title":"2020"},{"location":"#2019","text":"PeeringDB Update (English)/ \u041d\u043e\u0432\u043e\u0441\u0442\u0438 \u043e\u0442 PeeringDB (P\u0443\u0441\u0441\u043a\u0438\u0439) at MSK-IX Peering Forum 2019 , Moscow, RU - December 5, 2019 - Filiz Yilmaz PeeringDB - Como Est\u00e1 a Ado\u00e7\u00e3o no Brasil at MUM in Brazil , Foz do Igua\u00e7u, BR - November 29, 2019 - Julimar Lunguinho Mendes PeeringDB Para Que Sirve? at XII Encuentro Nacional de T\u00e9cnicos , Salta, AR - November 28, 2019 - Hernan Moguilevsky PeeringDB Update: A Look Into PeeringDB's Data for AT/CH/DE/LU and the Latest Changes at DENOG11 , Hamburg, DE - November 12, 2019 - Stefan Funke PeeringDB Update at Peering Asia 3.0 , Kuala Lumpur, MY - November 7, 2019 - Arnold Nipper PeeringDB Update at ATNOG 2019/2 , Vienna, AT - November 5, 2019 - Stefan Funke Introduction to PeeringDB at JBIX Peering Forum 2019 , Kuala Lumpur, MY - November 5, 2019 - Arnold Nipper Introduction to PeeringDB at ngNOG 2019 , Lagos, NG - October 30, 2019 - Ben Ryall Cadastro para participantes do IX.br at IX F\u00f3rum Regional , Florian\u00f3polis, BR - October 25, 2019 - Julimar Lunguinho Mendes OAuth for IXP Operators at the 35th Euro-IX Forum , Zaandam, NL - October 21, 2019 - Barry O'Donovan The PeeringDB API at the 35th Euro-IX Forum , Zaandam, NL - October 21, 2019 - Arnold Nipper Introduction to PeeringDB at RONOG 6 , Bucharest, RO - October 1, 2019 - Arnold Nipper PeeringDB Update at EPF14 , Tallinn, EE - September 18, 2019 - Filiz Yilmaz Cadastro para participantes do IX.br at IX F\u00f3rum Regional , Natal, BR - September 6, 2019 - Julimar Lunguinho Mendes Introduction to PeeringDB at SAFNOG-5 , Johannesburg, ZA - August 28, 2019 - Arnold Nipper Introduction to PeeringDB at AfPIF-10 , Balaclava, MV - August 22, 2019 - Arnold Nipper Introducci\u00f3n a PeeringDB at MexNOG 2019 , Mexico City, MX - August 14, 2019 - Diego Dominguez Introduction to PeeringDB at ATNOG 2019/1 , Salzburg, AT - July 16, 2019 - Arnold Nipper Introduction to PeeringDB at INNOG 2 , New Delhi, IN - July 1, 2019 - Arnold Nipper ( video ) Cadastro para participantes do IX.br at IX F\u00f3rum Regional , S\u00e3o Paulo, BR - June 10, 2019 - Julimar Lunguinho Mendes News from PeeringDB at ENOG 16 , Tbilisi, GE - June 3, 2019 - Arnold Nipper PeeringDB Update at NONOG-3 , Oslo, NO - May 27, 2019 - Arnold Nipper PeeringDB Update at SINOG 6.0 , Ljubljana, SI - May 14, 2019 - Arnold Nipper Introduction to PeeringDB at BKNIX Peering Forum and ThaiNOG Day 2019 , Bangkok, TH - May 7, 2019 - Arnold Nipper Use in Latin America at Peering Forum LAC , Punta Cana, DR - May 6, 2019 - Julimar Lunguinho Mendes and Carlos Martinez Cagnazzo Cadastro para participantes do IX.br at IX F\u00f3rum Regional , Campo Grande, BR - April 26, 2019 - Julimar Lunguinho Mendes Introduction to PeeringDB at Telecom Day , St. Petersburg, RU - April 19, 2019 - Arnold Nipper PeeringDB Update at SEE 8 , Sarajevo, BH - April 17, 2019 - Arnold Nipper PeeringDB Update at Curso Avan\u00e7ado de IPv6 , S\u00e3o Paulo, BR - April 5, 2019 - Julimar Lunguinho Mendes PeeringDB Update at BCIX Round Table April 2019 , Berlin, DE - April 4, 2019 - Stefan Funke PeeringDB Update at MENOG 19 , Beirut, LB - April 3, 2019 - Arnold Nipper PeeringDB Update at DKNOG9 , Copenhagen, DK - March 15, 2019 - Arnold Nipper PeeringDB Update at Peering Days 2019 , Zagreb, CR - March 12, 2019 - Arnold Nipper PeeringDB Update at PhNOG 2019 , Cebu, PH - March 8, 2019 - Arnold Nipper PeeringDB Update at HKNOG 7.0 , Hong Kong, HK - March 1, 2019 - Arnold Nipper","title":"2019"},{"location":"#2018","text":"PeeringDB Update at MSK-IX Peering Forum 2018 , Moscow, RU - November 23, 2018 - Rebecca Stani\u0107 PeeringDB Update at DENOG10 , Darmstadt, DE - November 21, 2018 - Arnold Nipper PeeringDB Update at ITNOG4 , Bologna, IT - November 9, 2018 - Arnold Nipper Introduction to PeeringDB API at the 33rd Euro-IX Forum , Venice, IT - November 6, 2018 - Arnold Nipper PeeringDB Introduction at ngNOG 2018 , Lagos, NG - October 31, 2018 - Ben Ryall PeeringDB Update at SwiNOG #34 , Berne, CH - October 30, 2018 - Arnold Nipper PeeringDB Update and Japanese Localization Experience at Peering Asia 2.0 , Hong Kong, HK - October 25, 2018 - Arnold Nipper and Masataka Mawatari PeeringDB Update at SAFNOG-4/EANOG/tzNOG , Dar es Salaam, TZ - September 25, 2018 - Arnold Nipper PeeringDB Update at EPF 13 , Athens, GR - September 18, 2018 - Rebecca Stani\u0107 Cadastro para participantes do IX.br at IX (PTT) F\u00f3rum Regional , Natal, BR - September 14, 2018 - Julimar Lunguinho Mendes PeeringDB Frontend Translation Project at APNIC 46 , Noumea, NC - September 12, 2018 - Masataka Mawatari PeeringDB Update at AfPIF2018 , Cape Town, ZA - August 23, 2018 - Arnold Nipper PeeringDB for IXes at AFIX , Cape Town, ZA - August 20, 2018 - Arnold Nipper Introduction to PeeringDB API at SANOG 32 , Dhaka, BD - August 10, 2018 - Arnold Nipper PeeringDB Update at SANOG 32 , Dhaka, BD - August 9, 2018 - Arnold Nipper PeeringDB: What is it, how to and benefits at New England Peering Forum 2018 , Cambridge, MA, US - June 22, 2018 - Patrick W. Gilmore PeeringDB Update at SEE 7 , Timi\u0219oara, R0 - June 18, 2018 - Arnold Nipper PeeringDB Update at ENOG 15 , Moscow, RU - June 5, 2018 - Arnold Nipper PeeringDB Update at SwiNOG 33 , Berne, CH - May 24, 2018 - Arnold Nipper PeeringDB Update e cadastro de Facilities at GTER 45 , Florian\u00f3polis, BR - May 22, 2018 - Julimar Lunguinho Mendes ( video ) PeeringDB Update at RIPE 76 Connect Working Group , Marseille, FR - May 16, 2018 - Arnold Nipper ( video ) PeeringDB Update at African Internet Summit 2018 , Dakar, SN - May 8, 2018 - Arnold Nipper PeeringDB Update at DKNOG8 , Copenhagen, DK - March 9, 2018 - Arnold Nipper PeeringDB Update at CEE Peering Days 2018 , Berlin, DE - March 7, 2018 - Arnold Nipper Introduction to PeeringDB at APRICOT 2018 , Kathmandu, NP - February 26, 2018 - Arnold Nipper PeeringDB Update at APIX Meeting #17 , Kathmandu, NP - February 24, 2018 - Arnold Nipper PeeringDB Introduction at Capacity India SAARC 2018 , New Delhi, IN - February 8, 2018 - Arnold Nipper","title":"2018"},{"location":"#2017","text":"PeeringDB Update at NIX.cz Member Meering , Prague, CZ - November 23, 2017 - Bijal Sanghani PeeringDB Update at DENOG9 , Darmstadt, DE - November 23, 2017 - Arnold Nipper PeeringDB Update at ALNOF , Tirana, AL - November 14, 2017 - Bijal Sanghani PeeringDB Update at Peering Asia 1.0 , Kyoto, JP - November 1, 2017 - Arnold Nipper PeeringDB Update at TOP-IX Meeting , Torino, IT - September 26, 2017 - Bijal Sanghani PeeringDB Update at NPD 17 , The Hague, NL - September 15, 2017 - Arnold Nipper PeeringDB Update at SAFNOG-3 , Durban, ZA - September 6, 2017 - Arnold Nipper PeeringDB Update at AfPIF 2017 , Abidjan, CI - August 24, 2017 - Arnold Nipper PeeringDB Update at SANOG 30 Peering Forum, Gurgaon, IN - July 10, 2017 - Arnold Nipper More benefits from PeeringDB at DE-CIX Technical Meeting , Frankfurt, DE - June 22, 2017 - Arnold Nipper PeeringDB Update at NANOG 70 , Bellevue, WA, US - June 5, 2017 - Aaron Hughes PeeringDB Update at BOSNOG Meeting IX Peering Forum , Cambridge, MA, US - June 2, 2017 - Stephen McManus Orienta\u00e7\u00f5es no preenchimento de participantes do IX.br at GTER 43 , Foz do Igua\u00e7u, BR - May 25, 2017 - Julimar Lunguinho Mendes PeeringDB Update at ENOG 13.0 , Saint Petersburg, RU - May 23, 2017 - Arnold Nipper PeeringDB Update at Global Peering Forum 12.0 , New York, NY, US - April 26, 2017 - Aaron Huges PeeringDB at GORE/ESNOG Reunion 19 , Barcelona, ES - April 6, 2017 - Arnold Nipper PeeringDB at CEE Peering Days 2017 , Ljubljana, SL - March 23, 2017 - Arnold Nipper PeeringDB 2.0 at APRICOT 2017 , Ho Chi Minh City, VN - February 28, 2017 - Arnold Nipper","title":"2017"},{"location":"#2016","text":"PeeringDB at 19 KIKE Conference , Serock, PL - November 23, 2016 - Robert Jakub PeeringDB 2.0 at ITNOG2 , Bologna, IT - November 3, 2016 - Arnold Nipper PeeringDB Product Committee Charter Survey at EPF 11 , Sofia, BG - September 20, 2016 - Eric Loos PeeringDB 2.0 at NPD 16 , The Hague, NL - September 16, 2016 - Walt Wollny PeeringDB 2.0 at AfPIF 2016 , Dar es Salaam, TZ - August 30, 2016 - Arnold Nipper PeeringDB 2.0 for IXPs at AFIX 2016 , Dar es Salaam, TZ - August 29, 2016 - Arnold Nipper PeeringDB 2.0 at ENOG 11 , Moscow, RU - June 7, 2016 - Arnold Nipper PeeringDB 2.0 at RIPE 72 , Copenhagen, DK - May 25, 2016 - Greg Hankins PeeringDB 2.0 at CHI-NOG 06 , Chicago, IL, US - May 12, 2016 - Matt Griswold PeeringDB 2.0 e o Cen\u00e1rio Brasileiro and IX.br Guia de cadastro de informa\u00e7\u00f5es de ASNs no PeeringDB at GTER 41 , Uberl\u00e2ndia, BR - May 12, 2016 - Eduardo Ascen\u00e7o Reis PeeringDB 2.0 for IXPs at 28th Euro-IX Forum , Luxembourg, LU - April 26, 2016 - Greg Hankins / Arnold Nipper RIPE SEE 5 , Tirana, AL - April 19, 2016 - Arnold Nipper PeeringDB 2.0 at UKNOF34 , Manchester, UK - April 21, 2016 - Greg Hankins PeeringDB Update at GPF 11 , Los Angeles, CA, US - April 13, 2016 - Aaron Hughes NetNod , Stockholm, SE - March 17, 2016 - Job Snijders DKNOG6 , Copenhagen, DK - March 10, 2016 - Job Snijders PeeringDB Update - Aaron Hughes APRICOT 2016 , Auckland, NZ - February 23, 2016 - Aaron Hughes NANOG 66 , San Diego, CA, US - February 10, 2016 - Aaron Hughes PeeringDB Version 2 Coding Introduction at NANOG 66 , San Diego, CA, US - February 8, 2016 - Matt Griswold","title":"2016"},{"location":"#2015","text":"PeeringDB Version 2 Brazil - Matt Griswold / Greg Hankins IX (PTT) F\u00f3rum 9 , S\u00e3o Paulo, BR - December 8, 2015 - Greg Hankins PeeringDB Version 2 Introduction - Matt Griswold 27th Euro-IX Forum , Berlin, DE - October 26, 2015 - Greg Hankins DENOG7 , Darmstadt, DE - October 30, 2015 - Arnold Nipper","title":"2015"},{"location":"#tools","text":"This section lists tools for using PeeringDB, and tools that use PeeringDB. django-peeringdb is a Django library with a local PeeringDB database sync. It defines the database schema to create a local database copy. The library is easy to integrate into a common framework for local tools and custom interfaces, and also supports multiple database engines (MySQL, Postgres, SQLite). The Isolario project improve knowledge about the AS-level ecosystem of the Internet by increasing the amount of Autonomous Systems (ASes) from which BGP data is collected. Isolario offers network operators services based on the real-time analysis of inter-domain routing from different points of view in return for full routing tables. Ixgen is yet another open source, multiplatform peering configuration generator that is based on the PeeringDB API. It can also run its own server for faster results. Ixgen is configured using an INI- or JSON-style format, and produces custom template-driven or fixed JSON-style configurations, peeringdb-py is a Python client for PeeringDB. It features functions to get objects and display them in JSON or YAML format, and provides a whois-like display of records. The client also has an integrated local database sync, and provides a Python library for integration with custom tools. Some examples are available too. Pinder is a tool that facilitates peering. If peering is desired between two networks, and you're happy to just configure sessions without a commercial agreement, Pinder acts as the middle man. You can submit the request via either a basic web UI or an API, and the other network is notified or can periodically check their outstanding requests. If both network agree to peer, they are notified to configure a session. Once both networks indicate that sessions are configured and established, the request is then deleted. A brief slide deck explains the functionality in more detail. Search in PeeringDB is a Chrome extension to search for ASNs, networks, and IXs in PeeringDB using the context menu. TraceMON is a tool for visualizing a network topology generated by traceroutes that provides one-click access to IXP and network information. It also displays PeeringDB information and allows the user to update their record. RIPE Atlas users can access it by selecting a traceroute measurement and clicking on the TraceMON tab.","title":"Tools"},{"location":"#open-source","text":"","title":"Open source"},{"location":"#source-code-audit","text":"PeeringDB commissioned a full audit of PeeringDB's source code in 2018. Computest (the auditor) prepared a Third Pary Memo , this memo provides a high level overview of the outcome of the source code audit. The report is available here .","title":"Source code audit"},{"location":"#beta-development","text":"The PeeringDB beta server is running the latest beta software version, with full access over HTTP and the API. Note that changes made to the beta database are local to the beta server only, and are not reflected on the production servers. The latest changes to PeeringDB automagically redirects to the list of issues on PeeringDB's GitHub repository that document all of the changes in the current beta version.","title":"Beta development"},{"location":"#historical-data","text":"MySQL dumps from July, 29 2010 to March 14, 2016 are archived by CAIDA at http://data.caida.org/datasets/peeringdb-v1/ .","title":"Historical data"},{"location":"#how-you-can-help","text":"Check your entries and make sure everything looks correct Port any scripts to the new API Send us feedback Improve these docs Add or improve a translation Thanks for your feedback, we look forward to hearing from you!","title":"How you can help"},{"location":"api_specs/","text":"RESTful API endpoints and specifications Object types and tags Each object has an associated short hand tag you can use, current available tags are listed at https://peeringdb.com/apidocs/ . Requests URL The URL base appended with /api/ , append with object type and optionally object primary key Object type is not case sensitive. For example: https://peeringdb.com/api/ OBJ / id Encoding To specify the output format, either use the Accept: HTTP header Accept: application/json Or use extension type https://peeringdb.com/api/network/42.json JSON all returns fit into object: { meta: { status: message: } data: [ {}, {} ] } meta are optional data always array Note Please let us know what serializers you'd like to see. Authentication Basic HTTP authorization In order to access the API as a guest simply omit any authentication Operations GET: multiple objects endpoint: GET /api/ OBJ optional URL parameters limit int limits rows in the result set skip int skips n rows in the result set depth int nested sets will be loaded (slow) fields str comma separated list of field names - only matching fields will be returned in the data since int retrieve all objects updated since specified time (unix timestamp, seconds) [field_name] int|string queries for fields with matching value returns array of objects HTTP: GET /api/OBJ curl: curl -X GET https:// username : password @peeringdb.com/api/OBJ Nested data Any field ending in the suffix _set (with the exception of 'irr_as_set') is a list of objects in a relationship with the parent object, you can expand those lists with the 'depth' parameter as explained below. The naming schema of the field will always tell you which type of object the set is holding and will correspond with the object's endpoint on the API object_type _set So a set called 'net_set' will hold Network objects (API endpoint /net) Note: unlike GET single, 'depth' here will ONLY expand sets, no single relationships will be expanded - this is by design Depth 0: don't expand anything (default) 1: expand all first level sets to ids 2: expand all first level sets to objects curl: curl -X GET https:// username : password @peeringdb.com/api/OBJ?depth=2 Querying examples exact: curl -X GET https:// username : password @peeringdb.com/api/OBJ?name=something modifier: curl -X GET https:// username : password @peeringdb.com/api/OBJ?name__contains=something Querying modifiers numeric fields: __lt, less than __lte, less than equal __gt, greater than __gte, greater than equal __in, value inside set of values (comma separated) string fields: __contains, field value contains this value __startswith, field value starts with this value __in, value inside set of values (comma separated) Since You can use the since argument with a unix timestamp (seconds) to retrieve all objects updated since then. ?since=1443414678 GET: single object endpoint: GET /api/ OBJ / id required URL parameters id int optional URL parameters depth int defaults to 2 aka. nested sets and objects will be expanded fields str comma separated list of field names - only matching fields will be returned in the data returns single object in an array HTTP: GET /api/OBJ/42 curl: curl -H \"Accept: application/json\" -X GET https:// username : password @peeringdb.com/api/OBJ/42 Nested data Any field ending in the suffix _set (with the exception of 'irr_as_set') is a list of objects in a relationship with the parent object, you can expand those lists with the 'depth' parameter as explained below. The naming schema of the field will always tell you which type of object the set is holding and will correspond with the object's endpoint on the API object_type _set So a set called 'net_set' will hold Network objects (API endpoint /net) Note: unlike GET multiple, 'depth' here will also expand single relationship in addition to sets. So 'net_id' would get expanded into a network object. unexpanded: { ... \"net_id\" : 1 } expanded: { ... \"net_id\" : 1 \"net\" : { ... network object ... } } Depth 0: don't expand anything 1 to 4: expand all sets and related objects according to level of depth specified 2 is default POST: create new object endpoint: POST /api/ OBJ required URL parameters id int fields to post in either JSON obj \"{}\" or urlencoded field=value curl: curl -H \"Content-Type: application/json\" -X POST --data \"{\\\"\"state\"\\\":\\\"active\\\"}\" https:// username : password @peeringdb.com/api/OBJ PUT: edit object endpoint: PUT /api/ OBJ / id required URL parameters id int fields to post in either JSON obj \"{}\" or urlencoded field=value you have to provide the complete object with modified data. Retrieve data with depth=0, modify and then put up again. HTTP: PUT /api/OBJ/42 curl: curl -H \"Content-Type: application/json\" -X PUT --data \"{\\\"\"state\"\\\":\\\"active\\\"}\" https:// username : password @peeringdb.com/api/OBJ/42 DELETE: delete object endpoint: DELETE /api/ OBJ / id required URL parameters id int HTTP: DELETE /api/OBJ/42 curl: curl -H \"Accept: application/json\" -X DELETE https:// username : password @peeringdb.com/api/OBJ/42 Deleted objects can be retrieved by filtering on status=deleted with since 0. Real world example Q: I'd like to search for Microsoft's, Salesforce.com's and Amazon.com's peering points in Europe. How can I do this? A: You can use the API to perform complex queries, like in this example. curl -sG https://peeringdb.com/api/netixlan --data-urlencode net_id__in=694,1100,1418 --data-urlencode ix_id__in=`curl -sG https://peeringdb.com/api/ix --data-urlencode region_continent=Europe | jq -c '[.data[].id]' | sed 's/\\[//;s/\\]//'` | jq -c '.data[] | [.ix_id, .net_id, .ipaddr4, .ipaddr6, .speed]' | sort -V The query looks for netixlan records belonging to Microsoft, Salesforce.com and Amazone.com (net_id__in=694,1100,1418) which are constrained to IXes in Europe based on the output from the embedded query. The embedded query in single quotes looks for all IXes with \"Continental Region = Europe\". We do a little massaging on the IX ids to get a comma-separated list, which we then use as input in the query. curl -sG https://peeringdb.com/api/ix --data-urlencode region_continent=Europe | jq -c '[.data[].id]' | sed 's/\\[//;s/\\]//'","title":"API Specs"},{"location":"api_specs/#restful-api-endpoints-and-specifications","text":"","title":"RESTful API endpoints and specifications"},{"location":"api_specs/#object-types-and-tags","text":"Each object has an associated short hand tag you can use, current available tags are listed at https://peeringdb.com/apidocs/ .","title":"Object types and tags"},{"location":"api_specs/#requests","text":"","title":"Requests"},{"location":"api_specs/#url","text":"The URL base appended with /api/ , append with object type and optionally object primary key Object type is not case sensitive. For example: https://peeringdb.com/api/ OBJ / id","title":"URL"},{"location":"api_specs/#encoding","text":"To specify the output format, either use the Accept: HTTP header Accept: application/json Or use extension type https://peeringdb.com/api/network/42.json JSON all returns fit into object: { meta: { status: message: } data: [ {}, {} ] } meta are optional data always array Note Please let us know what serializers you'd like to see.","title":"Encoding"},{"location":"api_specs/#authentication","text":"Basic HTTP authorization In order to access the API as a guest simply omit any authentication","title":"Authentication"},{"location":"api_specs/#operations","text":"","title":"Operations"},{"location":"api_specs/#get-multiple-objects","text":"endpoint: GET /api/ OBJ optional URL parameters limit int limits rows in the result set skip int skips n rows in the result set depth int nested sets will be loaded (slow) fields str comma separated list of field names - only matching fields will be returned in the data since int retrieve all objects updated since specified time (unix timestamp, seconds) [field_name] int|string queries for fields with matching value returns array of objects HTTP: GET /api/OBJ curl: curl -X GET https:// username : password @peeringdb.com/api/OBJ","title":"GET: multiple objects"},{"location":"api_specs/#nested-data","text":"Any field ending in the suffix _set (with the exception of 'irr_as_set') is a list of objects in a relationship with the parent object, you can expand those lists with the 'depth' parameter as explained below. The naming schema of the field will always tell you which type of object the set is holding and will correspond with the object's endpoint on the API object_type _set So a set called 'net_set' will hold Network objects (API endpoint /net) Note: unlike GET single, 'depth' here will ONLY expand sets, no single relationships will be expanded - this is by design","title":"Nested data"},{"location":"api_specs/#depth","text":"0: don't expand anything (default) 1: expand all first level sets to ids 2: expand all first level sets to objects curl: curl -X GET https:// username : password @peeringdb.com/api/OBJ?depth=2","title":"Depth"},{"location":"api_specs/#querying-examples","text":"exact: curl -X GET https:// username : password @peeringdb.com/api/OBJ?name=something modifier: curl -X GET https:// username : password @peeringdb.com/api/OBJ?name__contains=something","title":"Querying examples"},{"location":"api_specs/#querying-modifiers","text":"numeric fields: __lt, less than __lte, less than equal __gt, greater than __gte, greater than equal __in, value inside set of values (comma separated) string fields: __contains, field value contains this value __startswith, field value starts with this value __in, value inside set of values (comma separated)","title":"Querying modifiers"},{"location":"api_specs/#since","text":"You can use the since argument with a unix timestamp (seconds) to retrieve all objects updated since then. ?since=1443414678","title":"Since"},{"location":"api_specs/#get-single-object","text":"endpoint: GET /api/ OBJ / id required URL parameters id int optional URL parameters depth int defaults to 2 aka. nested sets and objects will be expanded fields str comma separated list of field names - only matching fields will be returned in the data returns single object in an array HTTP: GET /api/OBJ/42 curl: curl -H \"Accept: application/json\" -X GET https:// username : password @peeringdb.com/api/OBJ/42","title":"GET: single object"},{"location":"api_specs/#nested-data_1","text":"Any field ending in the suffix _set (with the exception of 'irr_as_set') is a list of objects in a relationship with the parent object, you can expand those lists with the 'depth' parameter as explained below. The naming schema of the field will always tell you which type of object the set is holding and will correspond with the object's endpoint on the API object_type _set So a set called 'net_set' will hold Network objects (API endpoint /net) Note: unlike GET multiple, 'depth' here will also expand single relationship in addition to sets. So 'net_id' would get expanded into a network object. unexpanded: { ... \"net_id\" : 1 } expanded: { ... \"net_id\" : 1 \"net\" : { ... network object ... } }","title":"Nested data"},{"location":"api_specs/#depth_1","text":"0: don't expand anything 1 to 4: expand all sets and related objects according to level of depth specified 2 is default","title":"Depth"},{"location":"api_specs/#post-create-new-object","text":"endpoint: POST /api/ OBJ required URL parameters id int fields to post in either JSON obj \"{}\" or urlencoded field=value curl: curl -H \"Content-Type: application/json\" -X POST --data \"{\\\"\"state\"\\\":\\\"active\\\"}\" https:// username : password @peeringdb.com/api/OBJ","title":"POST: create new object"},{"location":"api_specs/#put-edit-object","text":"endpoint: PUT /api/ OBJ / id required URL parameters id int fields to post in either JSON obj \"{}\" or urlencoded field=value you have to provide the complete object with modified data. Retrieve data with depth=0, modify and then put up again. HTTP: PUT /api/OBJ/42 curl: curl -H \"Content-Type: application/json\" -X PUT --data \"{\\\"\"state\"\\\":\\\"active\\\"}\" https:// username : password @peeringdb.com/api/OBJ/42","title":"PUT: edit object"},{"location":"api_specs/#delete-delete-object","text":"endpoint: DELETE /api/ OBJ / id required URL parameters id int HTTP: DELETE /api/OBJ/42 curl: curl -H \"Accept: application/json\" -X DELETE https:// username : password @peeringdb.com/api/OBJ/42 Deleted objects can be retrieved by filtering on status=deleted with since 0.","title":"DELETE: delete object"},{"location":"api_specs/#real-world-example","text":"Q: I'd like to search for Microsoft's, Salesforce.com's and Amazon.com's peering points in Europe. How can I do this? A: You can use the API to perform complex queries, like in this example. curl -sG https://peeringdb.com/api/netixlan --data-urlencode net_id__in=694,1100,1418 --data-urlencode ix_id__in=`curl -sG https://peeringdb.com/api/ix --data-urlencode region_continent=Europe | jq -c '[.data[].id]' | sed 's/\\[//;s/\\]//'` | jq -c '.data[] | [.ix_id, .net_id, .ipaddr4, .ipaddr6, .speed]' | sort -V The query looks for netixlan records belonging to Microsoft, Salesforce.com and Amazone.com (net_id__in=694,1100,1418) which are constrained to IXes in Europe based on the output from the embedded query. The embedded query in single quotes looks for all IXes with \"Continental Region = Europe\". We do a little massaging on the IX ids to get a comma-separated list, which we then use as input in the query. curl -sG https://peeringdb.com/api/ix --data-urlencode region_continent=Europe | jq -c '[.data[].id]' | sed 's/\\[//;s/\\]//'","title":"Real world example"},{"location":"blogs/","text":"PeeringDB Blogs PeeringDB blogs provide deeper insight into the releases and product roadmap. PeeringDB Release v2.23.0 - October 7, 2020","title":"Blogs"},{"location":"blogs/#peeringdb-blogs","text":"PeeringDB blogs provide deeper insight into the releases and product roadmap. PeeringDB Release v2.23.0 - October 7, 2020","title":"PeeringDB Blogs"},{"location":"faq/","text":"Frequently asked questions General What is PeeringDB? PeeringDB is a freely available, user-maintained, database of networks, and the go-to location for interconnection data. The database facilitates the global interconnection of networks at Internet Exchange Points (IXPs), data centers, and other interconnection facilities, and is the first stop in making interconnection decisions. The database is a non-profit, community-driven initiative run and promoted by volunteers. It is a public tool for the growth and good of the Internet. Join the community and support the continued development of the Internet. How do I get started? See our Quick Start guide: http://docs.peeringdb.com/#quick-start Affiliation requests Q: How does affiliation to an organization work? A: After you have registered, go to your profile . If your organization owns a network (also called AS or ASN), type in the AS number into the field ASN . Then click on the button Affiliate . If your ASN already is in PeeringDB and your org record does not yet have an admin account this request will be sent to PeeringDB Support If your organisation already has one or more admins your request is forwarded to them. They will have to approve / deny your request If your ASN is not in PeeringDB this procedure will first try to retrieve information about this ASN via RDAP to prepopulate the net record and the org record in case it also does not exist. We also use information from this query to auto approve your request if the email address in the RDAP record matches your email address. If this fails your request will be sent to PeeringDB Support You may also use the field organisation to request affiliation to an existing or new organisation. Start typing the name of your company and select from the popup or create a new organisation. Your request is sent to your admins if there is one or to PeeringDB Support otherwise In any case you should get an answer either from your admin or PeeringDB Support . If you don't get an answer within two working days, please mail PeeringDB Support providing necessary information (ASN, Organization). Technical How do I query by ASN? You may type in the ASN in the search box, or for web: http://as42.peeringdb.com https://peeringdb.com/net?asn=42 For API: https://peeringdb.com/api/net?asn=42 Using /asn used to work, what happened? Please see http://lists.peeringdb.com/pipermail/pdb-announce/2016-March/000036.html for details. How do the new permissions work? Now there is an org entity which owns the records. A record can be a facility, an exchange point, or a network. Users are added to the org entity and can then be given access to any facility, any network, any exchange point, or anything the org itself owns. Authenticating via embedded user/pass in the URL Support for this depends on the client and some browsers have stopped supporting embedded authentication in the URL So for example https:// username : password @peeringdb.com/api/net/1 may work or it may not depending on the browser you are using. Why are dates represented as strings in the API? Date strings are ISO 8601 to keep a standard format. Comparison operations such as __gt , __lt , etc all still work as expected. For fetching records against updated timestamp, you may also use ?since= seconds since epoch How do I sync the whole database to my local machine? You may make a full local copy with https://github.com/peeringdb/peeringdb-py , see docs at http://peeringdb.github.io/peeringdb-py/cli/ The initial run will perform a full sync, while subsequent runs will incrementally update changed records. Alternatively peeringdb-simplesync can be used to maintain a mirror in PostgreSQL. When syncing to MySQL I get 'Illegal mix of collations' Such as: django.db.utils.OperationalError: (1267, \"Illegal mix of collations (latin1_swedish_ci,IMPLICIT) and (utf8_general_ci,COERCIBLE) for operation '='\") We will fix that when time allows, for the time being, just run: alter database peeringdb default character set utf8 default collate utf8_unicode_ci; What does the Never via route servers flag mean and how does it work? With release 2.18.0 a new feature Never via route servers (API field info_never_via_route_servers ) has been introduced. There is a tick box in section \"Protcols Supported\" to set it. If set it is a hint for an IXP to use that information to block any BGP updates where the AS_PATH matches the regular expression ASN . Please make sure that the IXPs you are connected to are supporting this feature. I.e. they have to check PeeringDB regularly, evaluate this field and honour the setting. Governance and membership How does one become a PeeringDB member? Your organization does not need to be a Member to have an active account at PeeringDB.com, but Membership is available to those that do. Per the Bylaws, Membership is determined by having an active PeeringDB.com account, and a subscription to the pdb-gov mailing list. What are the Terms and Conditions for PeeringDB membership? Please see http://docs.peeringdb.com/gov/#organizational-documents for the legal aspects of PeeringDB. The Acceptable Use Policy is at https://peeringdb.com/aup . Are there any membership fees required for members? No, there are no membership fees required. The organization welcomes sponsorships as its method of financial support. Please see https://www.peeringdb.com/sponsors for more information on supporting the PeeringDB. Are there any liabilities imposed on members? No, there are not. To register network information in the PeeringDB, is an organization required to join as a member? No, that isn't necessary.","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently asked questions"},{"location":"faq/#general","text":"","title":"General"},{"location":"faq/#what-is-peeringdb","text":"PeeringDB is a freely available, user-maintained, database of networks, and the go-to location for interconnection data. The database facilitates the global interconnection of networks at Internet Exchange Points (IXPs), data centers, and other interconnection facilities, and is the first stop in making interconnection decisions. The database is a non-profit, community-driven initiative run and promoted by volunteers. It is a public tool for the growth and good of the Internet. Join the community and support the continued development of the Internet.","title":"What is PeeringDB?"},{"location":"faq/#how-do-i-get-started","text":"See our Quick Start guide: http://docs.peeringdb.com/#quick-start","title":"How do I get started?"},{"location":"faq/#affiliation-requests","text":"Q: How does affiliation to an organization work? A: After you have registered, go to your profile . If your organization owns a network (also called AS or ASN), type in the AS number into the field ASN . Then click on the button Affiliate . If your ASN already is in PeeringDB and your org record does not yet have an admin account this request will be sent to PeeringDB Support If your organisation already has one or more admins your request is forwarded to them. They will have to approve / deny your request If your ASN is not in PeeringDB this procedure will first try to retrieve information about this ASN via RDAP to prepopulate the net record and the org record in case it also does not exist. We also use information from this query to auto approve your request if the email address in the RDAP record matches your email address. If this fails your request will be sent to PeeringDB Support You may also use the field organisation to request affiliation to an existing or new organisation. Start typing the name of your company and select from the popup or create a new organisation. Your request is sent to your admins if there is one or to PeeringDB Support otherwise In any case you should get an answer either from your admin or PeeringDB Support . If you don't get an answer within two working days, please mail PeeringDB Support providing necessary information (ASN, Organization).","title":"Affiliation requests"},{"location":"faq/#technical","text":"","title":"Technical"},{"location":"faq/#how-do-i-query-by-asn","text":"You may type in the ASN in the search box, or for web: http://as42.peeringdb.com https://peeringdb.com/net?asn=42 For API: https://peeringdb.com/api/net?asn=42","title":"How do I query by ASN?"},{"location":"faq/#using-asn-used-to-work-what-happened","text":"Please see http://lists.peeringdb.com/pipermail/pdb-announce/2016-March/000036.html for details.","title":"Using /asn used to work, what happened?"},{"location":"faq/#how-do-the-new-permissions-work","text":"Now there is an org entity which owns the records. A record can be a facility, an exchange point, or a network. Users are added to the org entity and can then be given access to any facility, any network, any exchange point, or anything the org itself owns.","title":"How do the new permissions work?"},{"location":"faq/#authenticating-via-embedded-userpass-in-the-url","text":"Support for this depends on the client and some browsers have stopped supporting embedded authentication in the URL So for example https:// username : password @peeringdb.com/api/net/1 may work or it may not depending on the browser you are using.","title":"Authenticating via embedded user/pass in the URL"},{"location":"faq/#why-are-dates-represented-as-strings-in-the-api","text":"Date strings are ISO 8601 to keep a standard format. Comparison operations such as __gt , __lt , etc all still work as expected. For fetching records against updated timestamp, you may also use ?since= seconds since epoch","title":"Why are dates represented as strings in the API?"},{"location":"faq/#how-do-i-sync-the-whole-database-to-my-local-machine","text":"You may make a full local copy with https://github.com/peeringdb/peeringdb-py , see docs at http://peeringdb.github.io/peeringdb-py/cli/ The initial run will perform a full sync, while subsequent runs will incrementally update changed records. Alternatively peeringdb-simplesync can be used to maintain a mirror in PostgreSQL.","title":"How do I sync the whole database to my local machine?"},{"location":"faq/#when-syncing-to-mysql-i-get-illegal-mix-of-collations","text":"Such as: django.db.utils.OperationalError: (1267, \"Illegal mix of collations (latin1_swedish_ci,IMPLICIT) and (utf8_general_ci,COERCIBLE) for operation '='\") We will fix that when time allows, for the time being, just run: alter database peeringdb default character set utf8 default collate utf8_unicode_ci;","title":"When syncing to MySQL I get 'Illegal mix of collations'"},{"location":"faq/#what-does-the-never-via-route-servers-flag-mean-and-how-does-it-work","text":"With release 2.18.0 a new feature Never via route servers (API field info_never_via_route_servers ) has been introduced. There is a tick box in section \"Protcols Supported\" to set it. If set it is a hint for an IXP to use that information to block any BGP updates where the AS_PATH matches the regular expression ASN . Please make sure that the IXPs you are connected to are supporting this feature. I.e. they have to check PeeringDB regularly, evaluate this field and honour the setting.","title":"What does the Never via route servers flag mean and how does it work?"},{"location":"faq/#governance-and-membership","text":"","title":"Governance and membership"},{"location":"faq/#how-does-one-become-a-peeringdb-member","text":"Your organization does not need to be a Member to have an active account at PeeringDB.com, but Membership is available to those that do. Per the Bylaws, Membership is determined by having an active PeeringDB.com account, and a subscription to the pdb-gov mailing list.","title":"How does one become a PeeringDB member?"},{"location":"faq/#what-are-the-terms-and-conditions-for-peeringdb-membership","text":"Please see http://docs.peeringdb.com/gov/#organizational-documents for the legal aspects of PeeringDB. The Acceptable Use Policy is at https://peeringdb.com/aup .","title":"What are the Terms and Conditions for PeeringDB membership?"},{"location":"faq/#are-there-any-membership-fees-required-for-members","text":"No, there are no membership fees required. The organization welcomes sponsorships as its method of financial support. Please see https://www.peeringdb.com/sponsors for more information on supporting the PeeringDB.","title":"Are there any membership fees required for members?"},{"location":"faq/#are-there-any-liabilities-imposed-on-members","text":"No, there are not.","title":"Are there any liabilities imposed on members?"},{"location":"faq/#to-register-network-information-in-the-peeringdb-is-an-organization-required-to-join-as-a-member","text":"No, that isn't necessary.","title":"To register network information in the PeeringDB, is an organization required to join as a member?"},{"location":"gov/","text":"PeeringDB Governance Mission Statement PeeringDB, a nonprofit member-based organization, facilitates the interconnection of Internet networks globally, with user-maintained information. Member Meetings April 17th, 2020: Agenda - Minutes - Audio April 25th, 2019: Agenda - Minutes - Audio April 19th, 2018: Agenda - Minutes - Audio April 20th, 2017: Agenda - Minutes - Audio April 21st, 2016: Agenda - Minutes - Audio Strategic Plan Organizational Objectives 2020-2021 2019-2020 2017-2018 DRAFT Policies Acceptable Use Policy Data Ownership Policy Privacy Policy Board Meetings July 9th, 2020 May 8th, 2020 January 13th, 2020 September 27th, 2019 July 16th, 2019 May 16th, 2019 March 27th, 2019 January 29th, 2019 November 15th, 2018 October 9th, 2018 July 19th, 2018 May 18th, 2018 April 9th, 2018 February 8th, 2018 October 18th, 2017 September 20th, 2017 July 7th, 2017 May 18th, 2017 February 9th, 2017 January 13th, 2017 December 2nd, 2016 September 22nd, 2016 August 10th, 2016 July 1st, 2016 May 18th, 2016 April 6th, 2016 March 4th, 2016 February 4th, 2016 January 7th, 2016 December 8th, 2015 Finances May 13th, 2020: IRS Form 990-EZ for 2019 December 31st, 2019: Finance Report September 17th, 2019: IRS Form W-9 May 9th, 2019: IRS Form 990-EZ for 2018 December 31st, 2018: Finance Report May 11th, 2018: IRS Form 990-EZ for 2017 December 31st, 2017: Finance Report May 10th, 2017: IRS Form 990-EZ for 2016 December 31st, 2016: Finance Report February 24th, 2016: IRS 501(c)(6) Exemption Letter February 23rd, 2016: IRS Form 990-N for 2014 February 18th, 2016: IRS Form 990-N for 2015 January 7th, 2016: IRS 501(c)(6) Application December 31st, 2015: Finance Report December 31st, 2014: Finance Report Organizational Documents November 1st, 2019: Annual Report November 1st, 2018: Annual Report December 1st, 2017: Annual Report May 18th, 2017: Financial Controls Policy December 1st, 2016: Annual Report May 18th, 2016: Amended Annual Report December 16th, 2015: Certificate and Articles of Incorporation December 8th, 2015: Organizational Consent December 8th, 2015: Bylaws December 8th, 2015: Conflict of Interest Policy Surveys Elections April 30th, 2020: Board election results April 14th, 2020: Board election voter's guide April 30th, 2019: Board election results April 14th, 2019: Board election voter's guide April 30th, 2018: Board election results April 14th, 2018: Board election voter's guide April 30th, 2017: Board election results April 14th, 2017: Board election voter's guide April 30th, 2016: Board election results April 14th, 2016: Board election voter's guide December 1st, 2015: Board election results November 14th, 2015: Board election voter's guide October 20th, 2015: Announcement of survey results and Board election plan August, 2015: Survey for future of PeeringDB Board of Directors Seat 1 (term expires 2021): Bijal Sanghani , 2017- Seat 2 (term expires 2022): Job Snijders , 2015- Seat 3 (term expires 2021): Fredrik Korsb\u00e4ck , 2019- Seat 4 (term expires 2022): Aaron Hughes , 2015- Seat 5 (term expires 2021): Patrick W. Gilmore , 2015- Officers Aaron Hughes , President, 2015- Job Snijders , Vice President, 2016- Chris Caputo , Secretary Treasurer, 2015- Admin Committee Please see the Admin Committee page. Operations Committee Board members Snijders (Chair) and Hughes. Outreach Committee Please see the Outreach Committee page. Product Committee Please see the Product Committee page. Alumni Matt Griswold, Director, 2015-2017 Patrick W. Gilmore, Vice President, 2015-2016 Arnold Nipper, Director, 2015-2019","title":"Governance"},{"location":"gov/#peeringdb-governance","text":"","title":"PeeringDB Governance"},{"location":"gov/#mission-statement","text":"PeeringDB, a nonprofit member-based organization, facilitates the interconnection of Internet networks globally, with user-maintained information.","title":"Mission Statement"},{"location":"gov/#member-meetings","text":"April 17th, 2020: Agenda - Minutes - Audio April 25th, 2019: Agenda - Minutes - Audio April 19th, 2018: Agenda - Minutes - Audio April 20th, 2017: Agenda - Minutes - Audio April 21st, 2016: Agenda - Minutes - Audio","title":"Member Meetings"},{"location":"gov/#strategic-plan-organizational-objectives","text":"2020-2021 2019-2020 2017-2018 DRAFT","title":"Strategic Plan &amp; Organizational Objectives"},{"location":"gov/#policies","text":"Acceptable Use Policy Data Ownership Policy Privacy Policy","title":"Policies"},{"location":"gov/#board-meetings","text":"July 9th, 2020 May 8th, 2020 January 13th, 2020 September 27th, 2019 July 16th, 2019 May 16th, 2019 March 27th, 2019 January 29th, 2019 November 15th, 2018 October 9th, 2018 July 19th, 2018 May 18th, 2018 April 9th, 2018 February 8th, 2018 October 18th, 2017 September 20th, 2017 July 7th, 2017 May 18th, 2017 February 9th, 2017 January 13th, 2017 December 2nd, 2016 September 22nd, 2016 August 10th, 2016 July 1st, 2016 May 18th, 2016 April 6th, 2016 March 4th, 2016 February 4th, 2016 January 7th, 2016 December 8th, 2015","title":"Board Meetings"},{"location":"gov/#finances","text":"May 13th, 2020: IRS Form 990-EZ for 2019 December 31st, 2019: Finance Report September 17th, 2019: IRS Form W-9 May 9th, 2019: IRS Form 990-EZ for 2018 December 31st, 2018: Finance Report May 11th, 2018: IRS Form 990-EZ for 2017 December 31st, 2017: Finance Report May 10th, 2017: IRS Form 990-EZ for 2016 December 31st, 2016: Finance Report February 24th, 2016: IRS 501(c)(6) Exemption Letter February 23rd, 2016: IRS Form 990-N for 2014 February 18th, 2016: IRS Form 990-N for 2015 January 7th, 2016: IRS 501(c)(6) Application December 31st, 2015: Finance Report December 31st, 2014: Finance Report","title":"Finances"},{"location":"gov/#organizational-documents","text":"November 1st, 2019: Annual Report November 1st, 2018: Annual Report December 1st, 2017: Annual Report May 18th, 2017: Financial Controls Policy December 1st, 2016: Annual Report May 18th, 2016: Amended Annual Report December 16th, 2015: Certificate and Articles of Incorporation December 8th, 2015: Organizational Consent December 8th, 2015: Bylaws December 8th, 2015: Conflict of Interest Policy","title":"Organizational Documents"},{"location":"gov/#surveys-elections","text":"April 30th, 2020: Board election results April 14th, 2020: Board election voter's guide April 30th, 2019: Board election results April 14th, 2019: Board election voter's guide April 30th, 2018: Board election results April 14th, 2018: Board election voter's guide April 30th, 2017: Board election results April 14th, 2017: Board election voter's guide April 30th, 2016: Board election results April 14th, 2016: Board election voter's guide December 1st, 2015: Board election results November 14th, 2015: Board election voter's guide October 20th, 2015: Announcement of survey results and Board election plan August, 2015: Survey for future of PeeringDB","title":"Surveys &amp; Elections"},{"location":"gov/#board-of-directors","text":"Seat 1 (term expires 2021): Bijal Sanghani , 2017- Seat 2 (term expires 2022): Job Snijders , 2015- Seat 3 (term expires 2021): Fredrik Korsb\u00e4ck , 2019- Seat 4 (term expires 2022): Aaron Hughes , 2015- Seat 5 (term expires 2021): Patrick W. Gilmore , 2015-","title":"Board of Directors"},{"location":"gov/#officers","text":"Aaron Hughes , President, 2015- Job Snijders , Vice President, 2016- Chris Caputo , Secretary Treasurer, 2015-","title":"Officers"},{"location":"gov/#admin-committee","text":"Please see the Admin Committee page.","title":"Admin Committee"},{"location":"gov/#operations-committee","text":"Board members Snijders (Chair) and Hughes.","title":"Operations Committee"},{"location":"gov/#outreach-committee","text":"Please see the Outreach Committee page.","title":"Outreach Committee"},{"location":"gov/#product-committee","text":"Please see the Product Committee page.","title":"Product Committee"},{"location":"gov/#alumni","text":"Matt Griswold, Director, 2015-2017 Patrick W. Gilmore, Vice President, 2015-2016 Arnold Nipper, Director, 2015-2019","title":"Alumni"},{"location":"ix-f-json-import-rules/","text":"NOTE: As of August 2020, the Importer is being tested with only a small number of IXPs. Rules for the IX-F JSON Importer PeeringDB allows networks and IXPs to update entries via the IX-F JSON import feature. General remarks The Importer abides by the recommendations of the Data Ownership Task Force and its resulting Policy Document . Most significantly, this means that unless the tick box \"Allow IXP Update\" is enabled by a network, published data will not automatically become unpublished nor will unpublished data automatically become published. For Networks There is a tick box \"Allow IXP Update\" which governs the behavior of the Importer. By default this is set to disabled. If \"Allow IXP Update\" is enabled, a network entry at an IX may automatically be created, changed, or removed. The network's IX entry is completely governed by the settings in the IX-F JSON data provided by the IX. If \"Allow IXP Update\" is disabled, differences in data provided by the IX and the network will result in the following: An email to the network with details about the differences. An email to the IX with details about the differences. Admins for the network will see hints for their network within the PeeringDB web interface. These hints may be accepted or dismissed. The network and the IX are encouraged to reach out to each other to resolve any differences. After a period of 6 days, unresolved differences will be referred to the PeeringDB Admin Committee to assist with resolution. For IXPs To enable IX-F JSON import: Make sure that your JSON file is valid . Provide a URL to your IX-F JSON data. To do so, click Edit on your IX web page and set the IX-F Member Export URL to the URL and set Enable IX-F Import to enabled. You may also set the visibility of your IX-F JSON URL. Daily at 0000 UTC, the IX-F JSON data will be retrieved and processed by the Importer. The steps above for networks will then be followed. If the IX-F JSON state field is present, settings of active , connected , or operational may be used to indicate a network is operational, while a setting of inactive will be interpreted as the network not being operational. This may be used to denote a network in the process of connecting but not yet active, or a network on hiatus. Further Information August 17th, 2020 Data Ownership Policy Implementation Presentation: slides and video","title":"IX-F JSON"},{"location":"ix-f-json-import-rules/#note-as-of-august-2020-the-importer-is-being-tested-with-only-a-small-number-of-ixps","text":"","title":"NOTE: As of August 2020, the Importer is being tested with only a small number of IXPs."},{"location":"ix-f-json-import-rules/#rules-for-the-ix-f-json-importer","text":"PeeringDB allows networks and IXPs to update entries via the IX-F JSON import feature.","title":"Rules for the IX-F JSON Importer"},{"location":"ix-f-json-import-rules/#general-remarks","text":"The Importer abides by the recommendations of the Data Ownership Task Force and its resulting Policy Document . Most significantly, this means that unless the tick box \"Allow IXP Update\" is enabled by a network, published data will not automatically become unpublished nor will unpublished data automatically become published.","title":"General remarks"},{"location":"ix-f-json-import-rules/#for-networks","text":"There is a tick box \"Allow IXP Update\" which governs the behavior of the Importer. By default this is set to disabled. If \"Allow IXP Update\" is enabled, a network entry at an IX may automatically be created, changed, or removed. The network's IX entry is completely governed by the settings in the IX-F JSON data provided by the IX. If \"Allow IXP Update\" is disabled, differences in data provided by the IX and the network will result in the following: An email to the network with details about the differences. An email to the IX with details about the differences. Admins for the network will see hints for their network within the PeeringDB web interface. These hints may be accepted or dismissed. The network and the IX are encouraged to reach out to each other to resolve any differences. After a period of 6 days, unresolved differences will be referred to the PeeringDB Admin Committee to assist with resolution.","title":"For Networks"},{"location":"ix-f-json-import-rules/#for-ixps","text":"To enable IX-F JSON import: Make sure that your JSON file is valid . Provide a URL to your IX-F JSON data. To do so, click Edit on your IX web page and set the IX-F Member Export URL to the URL and set Enable IX-F Import to enabled. You may also set the visibility of your IX-F JSON URL. Daily at 0000 UTC, the IX-F JSON data will be retrieved and processed by the Importer. The steps above for networks will then be followed. If the IX-F JSON state field is present, settings of active , connected , or operational may be used to indicate a network is operational, while a setting of inactive will be interpreted as the network not being operational. This may be used to denote a network in the process of connecting but not yet active, or a network on hiatus.","title":"For IXPs"},{"location":"ix-f-json-import-rules/#further-information","text":"August 17th, 2020 Data Ownership Policy Implementation Presentation: slides and video","title":"Further Information"},{"location":"oauth/","text":"OAuth PeeringDB now offers OAuth2 authentication for third-party applications to allow users to authenticate against PeeringDB. Implementation details are at https://github.com/peeringdb/peeringdb/issues/131 . For an example, see https://github.com/inex/IXP-Manager/issues/322 . What is OAuth? There is a good write up at https://aaronparecki.com/oauth-2-simplified/ . Register an application First you need to register your application at https://peeringdb.com/oauth2/applications/ . URLs PDB_ENDPOINT = https://auth.peeringdb.com/ PDB_OAUTH_ACCESS_TOKEN_URL = '{}oauth2/token/'.format(PDB_ENDPOINT) PDB_OAUTH_AUTHORIZE_URL = '{}oauth2/authorize/'.format(PDB_ENDPOINT) PDB_OAUTH_PROFILE_URL = '{}profile/v1'.format(PDB_ENDPOINT) Fields The fields are based largely on OpenID Connect. Scopes currently are defined as profile : user profile email : adds fields email and verified_email networks : add field networks The perms field is a bitmask for CRUD as the 4 least significant bits. See following: 0b0000 1 1 1 1 | | | +-- Delete | | +---- Update | +------ Read + ------- Create Example for my user: { id : 3, name : Matt Griswold , given_name : Matt , family_name : Griswold , email : grizz@20c.com , verified_user : true, verified_email : true, networks : [ { perms : 15, asn : 63311, name : 20C , id : 20 }, { perms : 15, asn : 33713, name : United IX , id : 7889 } ] }","title":"OAuth"},{"location":"oauth/#oauth","text":"PeeringDB now offers OAuth2 authentication for third-party applications to allow users to authenticate against PeeringDB. Implementation details are at https://github.com/peeringdb/peeringdb/issues/131 . For an example, see https://github.com/inex/IXP-Manager/issues/322 .","title":"OAuth"},{"location":"oauth/#what-is-oauth","text":"There is a good write up at https://aaronparecki.com/oauth-2-simplified/ .","title":"What is OAuth?"},{"location":"oauth/#register-an-application","text":"First you need to register your application at https://peeringdb.com/oauth2/applications/ .","title":"Register an application"},{"location":"oauth/#urls","text":"PDB_ENDPOINT = https://auth.peeringdb.com/ PDB_OAUTH_ACCESS_TOKEN_URL = '{}oauth2/token/'.format(PDB_ENDPOINT) PDB_OAUTH_AUTHORIZE_URL = '{}oauth2/authorize/'.format(PDB_ENDPOINT) PDB_OAUTH_PROFILE_URL = '{}profile/v1'.format(PDB_ENDPOINT)","title":"URLs"},{"location":"oauth/#fields","text":"The fields are based largely on OpenID Connect. Scopes currently are defined as profile : user profile email : adds fields email and verified_email networks : add field networks The perms field is a bitmask for CRUD as the 4 least significant bits. See following: 0b0000 1 1 1 1 | | | +-- Delete | | +---- Update | +------ Read + ------- Create Example for my user: { id : 3, name : Matt Griswold , given_name : Matt , family_name : Griswold , email : grizz@20c.com , verified_user : true, verified_email : true, networks : [ { perms : 15, asn : 63311, name : 20C , id : 20 }, { perms : 15, asn : 33713, name : United IX , id : 7889 } ] }","title":"Fields"},{"location":"translation/","text":"Contributing to translations Adding a new locale If you wish to add a new locale, create a new ticket at https://github.com/peeringdb/peeringdb/issues stating your intent and one of the operators / developers will generate the necessary files for your locale and add them to the repository. Translation is done using PeeringDB's Weblate instance at https://translate.peeringdb.com/ . Signing in to Weblate Authentication is done via your PeeringDB credentials. So the only thing you have to do is to register with PeeringDB. Selecting languages Go to https://translate.peeringdb.com/accounts/profile/ to edit your profile and also to select the languages you want to help with. Viewing updates Translations are updated hourly on the beta website https://beta.peeringdb.com/ and daily at 0000 UTC on the production website https://www.peeringdb.com/ . Mailing list The http://lists.peeringdb.com/cgi-bin/mailman/listinfo/pdb-translate mailing list is open to anyone working on, or interested in translations. Thanks to the translators! ar Sara Alamin Mohamed Hassan de Sara Fink Stefan Funke Arnold Nipper jp Yutaro Fujii Norisuke Hirai Yuki Ikuno Chise Kawamura Kaoru Kitauchi Shintaro Kojima Yutaka Kumamoto Ryohey Matsumoto Masataka Mawatari Akira Nakagawa Satoshi Okawa Hideyuki Sasaki Tomocha Katsuyasu Toyama Taiji Tsuchiya Yudai Yamagishi Katsushi Yamaguchi Junpei Yoshino pt Ligio Gomes (NTT Communications) Robert Philips (NTT Communications)","title":"Translations"},{"location":"translation/#contributing-to-translations","text":"","title":"Contributing to translations"},{"location":"translation/#adding-a-new-locale","text":"If you wish to add a new locale, create a new ticket at https://github.com/peeringdb/peeringdb/issues stating your intent and one of the operators / developers will generate the necessary files for your locale and add them to the repository. Translation is done using PeeringDB's Weblate instance at https://translate.peeringdb.com/ .","title":"Adding a new locale"},{"location":"translation/#signing-in-to-weblate","text":"Authentication is done via your PeeringDB credentials. So the only thing you have to do is to register with PeeringDB.","title":"Signing in to Weblate"},{"location":"translation/#selecting-languages","text":"Go to https://translate.peeringdb.com/accounts/profile/ to edit your profile and also to select the languages you want to help with.","title":"Selecting languages"},{"location":"translation/#viewing-updates","text":"Translations are updated hourly on the beta website https://beta.peeringdb.com/ and daily at 0000 UTC on the production website https://www.peeringdb.com/ .","title":"Viewing updates"},{"location":"translation/#mailing-list","text":"The http://lists.peeringdb.com/cgi-bin/mailman/listinfo/pdb-translate mailing list is open to anyone working on, or interested in translations.","title":"Mailing list"},{"location":"translation/#thanks-to-the-translators","text":"","title":"Thanks to the translators!"},{"location":"translation/#ar","text":"Sara Alamin Mohamed Hassan","title":"ar"},{"location":"translation/#de","text":"Sara Fink Stefan Funke Arnold Nipper","title":"de"},{"location":"translation/#jp","text":"Yutaro Fujii Norisuke Hirai Yuki Ikuno Chise Kawamura Kaoru Kitauchi Shintaro Kojima Yutaka Kumamoto Ryohey Matsumoto Masataka Mawatari Akira Nakagawa Satoshi Okawa Hideyuki Sasaki Tomocha Katsuyasu Toyama Taiji Tsuchiya Yudai Yamagishi Katsushi Yamaguchi Junpei Yoshino","title":"jp"},{"location":"translation/#pt","text":"Ligio Gomes (NTT Communications) Robert Philips (NTT Communications)","title":"pt"},{"location":"blog/peeringdb_2020_satisfaction_survey/","text":"PeeringDB 2020 Satisfaction Survey PeeringDB wants input from network operators, exchange operators, facility providers, content distributors and anyone who uses our interconnection database. We are running an anonymous satisfaction survey until 23:59 UTC on 20 November 2020 and would like your feedback to help us make PeeringDB more useful to everyone involved in connecting networks. We haven\u2019t had the diversity of input we\u2019d like in previous surveys, so we are making an extra effort to reach parts of the community who weren\u2019t aware of our previous surveys. We're telling you here and we are teaming up with partners around the world to get the message out. Steve McManus, PeeringDB Product Committee Chair, says: \"Input from all PeeringDB users on what is important and what needs improving is essential. Telling us what you value and what you need us to improve will help us make PeeringDB better for you and make peering easier for all.\" The survey will help us understand what is important to you and how satisfied you are with what we are doing. We will use your responses to focus our product roadmap on the improvements that will make things better for you. If you have specific comments or suggestions we\u2019d love you to leave them along with your ratings. This is the first survey we are making available in multiple languages. In this survey we are using the six UN languages for the questions. That said, we\u2019re happy with people providing free text comments in whichever language they are happiest expressing themselves. We\u2019ll share the results and the new product roadmap early in 2021. If you have an idea to improve PeeringDB you can share it on our low traffic mailing lists or create an issue directly on GitHub . If you find a data quality issue, please let us know at . PeeringDB is a freely available, user-maintained, database of networks, and the go-to location for interconnection data. The database facilitates the global interconnection of networks at Internet Exchange Points (IXPs), data centers, and other interconnection facilities, and is the first stop in making interconnection decisions.","title":"PeeringDB 2020 Satisfaction Survey"},{"location":"blog/peeringdb_2020_satisfaction_survey/#peeringdb-2020-satisfaction-survey","text":"PeeringDB wants input from network operators, exchange operators, facility providers, content distributors and anyone who uses our interconnection database. We are running an anonymous satisfaction survey until 23:59 UTC on 20 November 2020 and would like your feedback to help us make PeeringDB more useful to everyone involved in connecting networks. We haven\u2019t had the diversity of input we\u2019d like in previous surveys, so we are making an extra effort to reach parts of the community who weren\u2019t aware of our previous surveys. We're telling you here and we are teaming up with partners around the world to get the message out. Steve McManus, PeeringDB Product Committee Chair, says: \"Input from all PeeringDB users on what is important and what needs improving is essential. Telling us what you value and what you need us to improve will help us make PeeringDB better for you and make peering easier for all.\" The survey will help us understand what is important to you and how satisfied you are with what we are doing. We will use your responses to focus our product roadmap on the improvements that will make things better for you. If you have specific comments or suggestions we\u2019d love you to leave them along with your ratings. This is the first survey we are making available in multiple languages. In this survey we are using the six UN languages for the questions. That said, we\u2019re happy with people providing free text comments in whichever language they are happiest expressing themselves. We\u2019ll share the results and the new product roadmap early in 2021. If you have an idea to improve PeeringDB you can share it on our low traffic mailing lists or create an issue directly on GitHub . If you find a data quality issue, please let us know at . PeeringDB is a freely available, user-maintained, database of networks, and the go-to location for interconnection data. The database facilitates the global interconnection of networks at Internet Exchange Points (IXPs), data centers, and other interconnection facilities, and is the first stop in making interconnection decisions.","title":"PeeringDB 2020 Satisfaction Survey"},{"location":"blog/peeringdb_release_v2.23.0/","text":"PeeringDB Release v2.23.0 PeeringDB is pleased to announce the release of v2.23.0. Summary release notes are published on the release notes page . This release includes a key feature that comes out of the Data Ownership Task Force , which was established to clarify who is authoritative for data about networks where multiple members participate, like IXPs. This change means that all networks will need to have a technical POC when they publish a connection to an exchange network. This change will help all the parties on the exchange resolve technical issues efficiently. It was proposed and discussed in GitHub issues #826 . Stefan Wahl, Senior Ambassador ECIX, Megaport, says: \"This new feature is a great improvement allowing users to correctly identify the authoritative contact of a network. I enjoyed collaborating with the PeeringDB Task Force on this project.\" If you have an idea to improve PeeringDB you can share it on our low traffic mailing lists or create an issue directly on GitHub . If you find a data quality issue, please let us know at . PeeringDB is a freely available, user-maintained, database of networks, and the go-to location for interconnection data. The database facilitates the global interconnection of networks at Internet Exchange Points (IXPs), data centers, and other interconnection facilities, and is the first stop in making interconnection decisions.","title":"PeeringDB Release v2.23.0"},{"location":"blog/peeringdb_release_v2.23.0/#peeringdb-release-v2230","text":"PeeringDB is pleased to announce the release of v2.23.0. Summary release notes are published on the release notes page . This release includes a key feature that comes out of the Data Ownership Task Force , which was established to clarify who is authoritative for data about networks where multiple members participate, like IXPs. This change means that all networks will need to have a technical POC when they publish a connection to an exchange network. This change will help all the parties on the exchange resolve technical issues efficiently. It was proposed and discussed in GitHub issues #826 . Stefan Wahl, Senior Ambassador ECIX, Megaport, says: \"This new feature is a great improvement allowing users to correctly identify the authoritative contact of a network. I enjoyed collaborating with the PeeringDB Task Force on this project.\" If you have an idea to improve PeeringDB you can share it on our low traffic mailing lists or create an issue directly on GitHub . If you find a data quality issue, please let us know at . PeeringDB is a freely available, user-maintained, database of networks, and the go-to location for interconnection data. The database facilitates the global interconnection of networks at Internet Exchange Points (IXPs), data centers, and other interconnection facilities, and is the first stop in making interconnection decisions.","title":"PeeringDB Release v2.23.0"},{"location":"committee/common/","text":"PeeringDB Common Committee Charter Provisions: Dispute Resolution If the committee handles an issue in a manner in which a user believes that their view has not been adequately considered, their first action should be to raise the concern with the Committee Chair for further consideration. If the dispute is between the user and the Committee Chair then the issue may alternatively be raised with the Committee Vice Chair. If the dispute cannot be resolved the matter may be brought forward to the PeeringDB Board. The decision by the PeeringDB Board shall be final. Committee Chair and Vice Chair The committee elects their Chair and Vice Chair from among their members, subject to PeeringDB Board approval. The Chair and Vice Chair work as a team and distribute the workload between themselves as they deem appropriate. Decisions should be unanimous, however the final decision on any matter is with the Chair. In case the Chair becomes unavailable, the Vice Chair may assume the position of Acting Chair. If the Chair or Vice Chair become permanently unavailable, replacement(s) are elected from the remaining committee members, subject to PeeringDB Board approval.","title":"Common"},{"location":"committee/common/#dispute-resolution","text":"If the committee handles an issue in a manner in which a user believes that their view has not been adequately considered, their first action should be to raise the concern with the Committee Chair for further consideration. If the dispute is between the user and the Committee Chair then the issue may alternatively be raised with the Committee Vice Chair. If the dispute cannot be resolved the matter may be brought forward to the PeeringDB Board. The decision by the PeeringDB Board shall be final.","title":"Dispute Resolution"},{"location":"committee/common/#committee-chair-and-vice-chair","text":"The committee elects their Chair and Vice Chair from among their members, subject to PeeringDB Board approval. The Chair and Vice Chair work as a team and distribute the workload between themselves as they deem appropriate. Decisions should be unanimous, however the final decision on any matter is with the Chair. In case the Chair becomes unavailable, the Vice Chair may assume the position of Acting Chair. If the Chair or Vice Chair become permanently unavailable, replacement(s) are elected from the remaining committee members, subject to PeeringDB Board approval.","title":"Committee Chair and Vice Chair"},{"location":"committee/admin/","text":"PeeringDB Admin Committee Purpose is to oversee the administrator mission and volunteers. Interested in volunteering? Contact admincom@lists.peeringdb.com . PeeringDB Admin Committee Charter Approved by Board July 9th, 2020 Scope The PeeringDB Admin Committee (AC) is responsible for the day to day end-user support of PeeringDB. The Admin Committee functions as the first point of contact for any inquiries to PeeringDB. The Admin Committee produces definitions for enhancements to the workflow and Admin GUI and works with the Product Committee to plan a coherent roadmap for the PeeringDB software. Out of Scope Work covered in the charter of the Operations, Outreach, Product, and further to be established Committees Deliverables Take care of support tickets, the Admin Committee strives to answer tickets within 24 hours Gather input from end-users regarding the improvement of PeeringDB in terms of bugs and product features and channel them towards the Product Committee via GitHub Improve PeeringDB Admin GUI to help expedient resolution of support tickets Collaboration The Admin Committee works with other PeeringDB committees to ensure an equitable division of development resources in recognition of the volunteer efforts that are ensuring the daily operations. Participation The PeeringDB Admin Committee members serve a one-year renewable term. Volunteers can submit their candidacy to the Admin Committee Chair. The Chair and Vice Chair will choose a new Admin Committee member at any time they see the necessity to ensure the continuity of the Admin Committee. There is a trial period of one month. New members are onboarded by a more experienced committee member (WebEx / Google Hangouts / 3 example tickets). After the trial period appointment is confirmed by the Chair and Vice Chair for one year. Expectations Individual committee members should do their fair share of tickets measured over a month If a committee member is away for an extended period of time, inform the Chair, Vice Chair, and a notification sent to the Admin Committee mailing list One month probation where they get taught/mentored by an experienced admin, and where if they do not do the work, they get booted Chairs perform a quarterly review. If you don't meet a fair portion of the work you'll be nudged. Also, three months of inactivity is an automatic ejection Communication Questions and suggestions for the Admin Committee can be sent to the Admincom Mailing List On- and de-boarding is handled via the Admincom GitHub All other issues, also for Admin GUI bugs and features must go to the regular GitHub Any support questions should be directed to the Support Address Admin Committee uses slack and emails for internal communication Regular (4-6 week interval) conference calls are used to stay synced and discuss issues Decision Policy Admin Committee members will decide on their own when handling support tickets according to the Admin Committee BCP laid out in the Admin Committee How-To Folder. Otherwise, they will decide by simple majority vote on contested issues called by the Admin Committee Chair. If there is a tie the Chair's vote is counted double. Workflow Admincom uses DeskPRO and GitHub as well as direct communication with the main service contractor 20C to achieve its deliverables. In communicating with 3rd parties the Admin Committee should be kept in the loop if the issue is of general interest. PeeringDB Common Committee Charter Provisions: Dispute Resolution If the committee handles an issue in a manner in which a user believes that their view has not been adequately considered, their first action should be to raise the concern with the Committee Chair for further consideration. If the dispute is between the user and the Committee Chair then the issue may alternatively be raised with the Committee Vice Chair. If the dispute cannot be resolved the matter may be brought forward to the PeeringDB Board. The decision by the PeeringDB Board shall be final. Committee Chair and Vice Chair The committee elects their Chair and Vice Chair from among their members, subject to PeeringDB Board approval. The Chair and Vice Chair work as a team and distribute the workload between themselves as they deem appropriate. Decisions should be unanimous, however the final decision on any matter is with the Chair. In case the Chair becomes unavailable, the Vice Chair may assume the position of Acting Chair. If the Chair or Vice Chair become permanently unavailable, replacement(s) are elected from the remaining committee members, subject to PeeringDB Board approval. Meeting Notes June 23rd, 2020: Meeting Notes May 12th, 2020: Meeting Notes November 21st, 2019: Meeting Notes July 18th, 2019: Meeting Notes May 2nd, 2019: Meeting Notes Members Shaun Coffey Darwin Da Costa (Vice Chair) Stefan Funke Alexandre Guimaraes Chriztoffer Hansen Peter Helmenstine Julimar Lunguinho Mendes Arnold Nipper (Chair) Job Snijders (Board Liaison)","title":"Admin Committee"},{"location":"committee/admin/#peeringdb-admin-committee","text":"Purpose is to oversee the administrator mission and volunteers. Interested in volunteering? Contact admincom@lists.peeringdb.com .","title":"PeeringDB Admin Committee"},{"location":"committee/admin/#peeringdb-admin-committee-charter","text":"Approved by Board July 9th, 2020","title":"PeeringDB Admin Committee Charter"},{"location":"committee/admin/#scope","text":"The PeeringDB Admin Committee (AC) is responsible for the day to day end-user support of PeeringDB. The Admin Committee functions as the first point of contact for any inquiries to PeeringDB. The Admin Committee produces definitions for enhancements to the workflow and Admin GUI and works with the Product Committee to plan a coherent roadmap for the PeeringDB software.","title":"Scope"},{"location":"committee/admin/#out-of-scope","text":"Work covered in the charter of the Operations, Outreach, Product, and further to be established Committees","title":"Out of Scope"},{"location":"committee/admin/#deliverables","text":"Take care of support tickets, the Admin Committee strives to answer tickets within 24 hours Gather input from end-users regarding the improvement of PeeringDB in terms of bugs and product features and channel them towards the Product Committee via GitHub Improve PeeringDB Admin GUI to help expedient resolution of support tickets","title":"Deliverables"},{"location":"committee/admin/#collaboration","text":"The Admin Committee works with other PeeringDB committees to ensure an equitable division of development resources in recognition of the volunteer efforts that are ensuring the daily operations.","title":"Collaboration"},{"location":"committee/admin/#participation","text":"The PeeringDB Admin Committee members serve a one-year renewable term. Volunteers can submit their candidacy to the Admin Committee Chair. The Chair and Vice Chair will choose a new Admin Committee member at any time they see the necessity to ensure the continuity of the Admin Committee. There is a trial period of one month. New members are onboarded by a more experienced committee member (WebEx / Google Hangouts / 3 example tickets). After the trial period appointment is confirmed by the Chair and Vice Chair for one year.","title":"Participation"},{"location":"committee/admin/#expectations","text":"Individual committee members should do their fair share of tickets measured over a month If a committee member is away for an extended period of time, inform the Chair, Vice Chair, and a notification sent to the Admin Committee mailing list One month probation where they get taught/mentored by an experienced admin, and where if they do not do the work, they get booted Chairs perform a quarterly review. If you don't meet a fair portion of the work you'll be nudged. Also, three months of inactivity is an automatic ejection","title":"Expectations"},{"location":"committee/admin/#communication","text":"Questions and suggestions for the Admin Committee can be sent to the Admincom Mailing List On- and de-boarding is handled via the Admincom GitHub All other issues, also for Admin GUI bugs and features must go to the regular GitHub Any support questions should be directed to the Support Address Admin Committee uses slack and emails for internal communication Regular (4-6 week interval) conference calls are used to stay synced and discuss issues","title":"Communication"},{"location":"committee/admin/#decision-policy","text":"Admin Committee members will decide on their own when handling support tickets according to the Admin Committee BCP laid out in the Admin Committee How-To Folder. Otherwise, they will decide by simple majority vote on contested issues called by the Admin Committee Chair. If there is a tie the Chair's vote is counted double.","title":"Decision Policy"},{"location":"committee/admin/#workflow","text":"Admincom uses DeskPRO and GitHub as well as direct communication with the main service contractor 20C to achieve its deliverables. In communicating with 3rd parties the Admin Committee should be kept in the loop if the issue is of general interest. PeeringDB Common Committee Charter Provisions:","title":"Workflow"},{"location":"committee/admin/#dispute-resolution","text":"If the committee handles an issue in a manner in which a user believes that their view has not been adequately considered, their first action should be to raise the concern with the Committee Chair for further consideration. If the dispute is between the user and the Committee Chair then the issue may alternatively be raised with the Committee Vice Chair. If the dispute cannot be resolved the matter may be brought forward to the PeeringDB Board. The decision by the PeeringDB Board shall be final.","title":"Dispute Resolution"},{"location":"committee/admin/#committee-chair-and-vice-chair","text":"The committee elects their Chair and Vice Chair from among their members, subject to PeeringDB Board approval. The Chair and Vice Chair work as a team and distribute the workload between themselves as they deem appropriate. Decisions should be unanimous, however the final decision on any matter is with the Chair. In case the Chair becomes unavailable, the Vice Chair may assume the position of Acting Chair. If the Chair or Vice Chair become permanently unavailable, replacement(s) are elected from the remaining committee members, subject to PeeringDB Board approval.","title":"Committee Chair and Vice Chair"},{"location":"committee/admin/#meeting-notes","text":"June 23rd, 2020: Meeting Notes May 12th, 2020: Meeting Notes November 21st, 2019: Meeting Notes July 18th, 2019: Meeting Notes May 2nd, 2019: Meeting Notes","title":"Meeting Notes"},{"location":"committee/admin/#members","text":"Shaun Coffey Darwin Da Costa (Vice Chair) Stefan Funke Alexandre Guimaraes Chriztoffer Hansen Peter Helmenstine Julimar Lunguinho Mendes Arnold Nipper (Chair) Job Snijders (Board Liaison)","title":"Members"},{"location":"committee/admin/charter/","text":"PeeringDB Admin Committee Charter Approved by Board July 9th, 2020 Scope The PeeringDB Admin Committee (AC) is responsible for the day to day end-user support of PeeringDB. The Admin Committee functions as the first point of contact for any inquiries to PeeringDB. The Admin Committee produces definitions for enhancements to the workflow and Admin GUI and works with the Product Committee to plan a coherent roadmap for the PeeringDB software. Out of Scope Work covered in the charter of the Operations, Outreach, Product, and further to be established Committees Deliverables Take care of support tickets, the Admin Committee strives to answer tickets within 24 hours Gather input from end-users regarding the improvement of PeeringDB in terms of bugs and product features and channel them towards the Product Committee via GitHub Improve PeeringDB Admin GUI to help expedient resolution of support tickets Collaboration The Admin Committee works with other PeeringDB committees to ensure an equitable division of development resources in recognition of the volunteer efforts that are ensuring the daily operations. Participation The PeeringDB Admin Committee members serve a one-year renewable term. Volunteers can submit their candidacy to the Admin Committee Chair. The Chair and Vice Chair will choose a new Admin Committee member at any time they see the necessity to ensure the continuity of the Admin Committee. There is a trial period of one month. New members are onboarded by a more experienced committee member (WebEx / Google Hangouts / 3 example tickets). After the trial period appointment is confirmed by the Chair and Vice Chair for one year. Expectations Individual committee members should do their fair share of tickets measured over a month If a committee member is away for an extended period of time, inform the Chair, Vice Chair, and a notification sent to the Admin Committee mailing list One month probation where they get taught/mentored by an experienced admin, and where if they do not do the work, they get booted Chairs perform a quarterly review. If you don't meet a fair portion of the work you'll be nudged. Also, three months of inactivity is an automatic ejection Communication Questions and suggestions for the Admin Committee can be sent to the Admincom Mailing List On- and de-boarding is handled via the Admincom GitHub All other issues, also for Admin GUI bugs and features must go to the regular GitHub Any support questions should be directed to the Support Address Admin Committee uses slack and emails for internal communication Regular (4-6 week interval) conference calls are used to stay synced and discuss issues Decision Policy Admin Committee members will decide on their own when handling support tickets according to the Admin Committee BCP laid out in the Admin Committee How-To Folder. Otherwise, they will decide by simple majority vote on contested issues called by the Admin Committee Chair. If there is a tie the Chair's vote is counted double. Workflow Admincom uses DeskPRO and GitHub as well as direct communication with the main service contractor 20C to achieve its deliverables. In communicating with 3rd parties the Admin Committee should be kept in the loop if the issue is of general interest. PeeringDB Common Committee Charter Provisions: Dispute Resolution If the committee handles an issue in a manner in which a user believes that their view has not been adequately considered, their first action should be to raise the concern with the Committee Chair for further consideration. If the dispute is between the user and the Committee Chair then the issue may alternatively be raised with the Committee Vice Chair. If the dispute cannot be resolved the matter may be brought forward to the PeeringDB Board. The decision by the PeeringDB Board shall be final. Committee Chair and Vice Chair The committee elects their Chair and Vice Chair from among their members, subject to PeeringDB Board approval. The Chair and Vice Chair work as a team and distribute the workload between themselves as they deem appropriate. Decisions should be unanimous, however the final decision on any matter is with the Chair. In case the Chair becomes unavailable, the Vice Chair may assume the position of Acting Chair. If the Chair or Vice Chair become permanently unavailable, replacement(s) are elected from the remaining committee members, subject to PeeringDB Board approval.","title":"Charter"},{"location":"committee/admin/charter/#peeringdb-admin-committee-charter","text":"Approved by Board July 9th, 2020","title":"PeeringDB Admin Committee Charter"},{"location":"committee/admin/charter/#scope","text":"The PeeringDB Admin Committee (AC) is responsible for the day to day end-user support of PeeringDB. The Admin Committee functions as the first point of contact for any inquiries to PeeringDB. The Admin Committee produces definitions for enhancements to the workflow and Admin GUI and works with the Product Committee to plan a coherent roadmap for the PeeringDB software.","title":"Scope"},{"location":"committee/admin/charter/#out-of-scope","text":"Work covered in the charter of the Operations, Outreach, Product, and further to be established Committees","title":"Out of Scope"},{"location":"committee/admin/charter/#deliverables","text":"Take care of support tickets, the Admin Committee strives to answer tickets within 24 hours Gather input from end-users regarding the improvement of PeeringDB in terms of bugs and product features and channel them towards the Product Committee via GitHub Improve PeeringDB Admin GUI to help expedient resolution of support tickets","title":"Deliverables"},{"location":"committee/admin/charter/#collaboration","text":"The Admin Committee works with other PeeringDB committees to ensure an equitable division of development resources in recognition of the volunteer efforts that are ensuring the daily operations.","title":"Collaboration"},{"location":"committee/admin/charter/#participation","text":"The PeeringDB Admin Committee members serve a one-year renewable term. Volunteers can submit their candidacy to the Admin Committee Chair. The Chair and Vice Chair will choose a new Admin Committee member at any time they see the necessity to ensure the continuity of the Admin Committee. There is a trial period of one month. New members are onboarded by a more experienced committee member (WebEx / Google Hangouts / 3 example tickets). After the trial period appointment is confirmed by the Chair and Vice Chair for one year.","title":"Participation"},{"location":"committee/admin/charter/#expectations","text":"Individual committee members should do their fair share of tickets measured over a month If a committee member is away for an extended period of time, inform the Chair, Vice Chair, and a notification sent to the Admin Committee mailing list One month probation where they get taught/mentored by an experienced admin, and where if they do not do the work, they get booted Chairs perform a quarterly review. If you don't meet a fair portion of the work you'll be nudged. Also, three months of inactivity is an automatic ejection","title":"Expectations"},{"location":"committee/admin/charter/#communication","text":"Questions and suggestions for the Admin Committee can be sent to the Admincom Mailing List On- and de-boarding is handled via the Admincom GitHub All other issues, also for Admin GUI bugs and features must go to the regular GitHub Any support questions should be directed to the Support Address Admin Committee uses slack and emails for internal communication Regular (4-6 week interval) conference calls are used to stay synced and discuss issues","title":"Communication"},{"location":"committee/admin/charter/#decision-policy","text":"Admin Committee members will decide on their own when handling support tickets according to the Admin Committee BCP laid out in the Admin Committee How-To Folder. Otherwise, they will decide by simple majority vote on contested issues called by the Admin Committee Chair. If there is a tie the Chair's vote is counted double.","title":"Decision Policy"},{"location":"committee/admin/charter/#workflow","text":"Admincom uses DeskPRO and GitHub as well as direct communication with the main service contractor 20C to achieve its deliverables. In communicating with 3rd parties the Admin Committee should be kept in the loop if the issue is of general interest. PeeringDB Common Committee Charter Provisions:","title":"Workflow"},{"location":"committee/admin/charter/#dispute-resolution","text":"If the committee handles an issue in a manner in which a user believes that their view has not been adequately considered, their first action should be to raise the concern with the Committee Chair for further consideration. If the dispute is between the user and the Committee Chair then the issue may alternatively be raised with the Committee Vice Chair. If the dispute cannot be resolved the matter may be brought forward to the PeeringDB Board. The decision by the PeeringDB Board shall be final.","title":"Dispute Resolution"},{"location":"committee/admin/charter/#committee-chair-and-vice-chair","text":"The committee elects their Chair and Vice Chair from among their members, subject to PeeringDB Board approval. The Chair and Vice Chair work as a team and distribute the workload between themselves as they deem appropriate. Decisions should be unanimous, however the final decision on any matter is with the Chair. In case the Chair becomes unavailable, the Vice Chair may assume the position of Acting Chair. If the Chair or Vice Chair become permanently unavailable, replacement(s) are elected from the remaining committee members, subject to PeeringDB Board approval.","title":"Committee Chair and Vice Chair"},{"location":"committee/outreach/","text":"PeeringDB Outreach Committee Purpose is to coordinate outreach and evanglism in the community. Interested in volunteering? Contact outreachcom@lists.peeringdb.com . PeeringDB Outreach Committee Charter Approved by Board July 9th, 2020 Scope The PeeringDB Outreach Committee (OC) is charged with the marketing efforts and running the organization's external engagement to continuously improve the value that PeeringDB delivers to the organisations registered with PeeringDB, and the broader community. Out of Scope The OC Committee does not work on other areas, such as product development, as these are managed by the other respective committees and defined in their respective charters. Deliverables Gather inputs from the other respective PeeringDB committees on developments and significant updates and ensure these are communicated the community Coordinate with partner committees and prepare presentations with relevant PeeringDB updates Identify and attend relevant community events to publicize PeeringDB developments and engage the community to drive additional records to be created Identify marketing opportunities for relevant PeeringDB activities Share key milestones and engage with the community through social media channels Participation The PeeringDB Outreach Committee members serve a one-year renewable term. Volunteers can submit their candidacy to the Outreach Committee Chair. The Chair and Vice Chair will choose a new Outreach Committee member at any time they see the necessity to ensure the continuity of the Outreach Committee. Communication Questions and suggestions for the Outreach Committee can be sent to Decision Policy Outreach Committee members will decide by simple majority vote on contested issues called by the Outreach Committee Chair. PeeringDB Common Committee Charter Provisions: Dispute Resolution If the committee handles an issue in a manner in which a user believes that their view has not been adequately considered, their first action should be to raise the concern with the Committee Chair for further consideration. If the dispute is between the user and the Committee Chair then the issue may alternatively be raised with the Committee Vice Chair. If the dispute cannot be resolved the matter may be brought forward to the PeeringDB Board. The decision by the PeeringDB Board shall be final. Committee Chair and Vice Chair The committee elects their Chair and Vice Chair from among their members, subject to PeeringDB Board approval. The Chair and Vice Chair work as a team and distribute the workload between themselves as they deem appropriate. Decisions should be unanimous, however the final decision on any matter is with the Chair. In case the Chair becomes unavailable, the Vice Chair may assume the position of Acting Chair. If the Chair or Vice Chair become permanently unavailable, replacement(s) are elected from the remaining committee members, subject to PeeringDB Board approval. Meeting Notes August 4th, 2020: Meeting Notes July 7th, 2020: Meeting Notes June 2nd, 2020: Meeting Notes May 7th, 2020: Meeting Notes April 7th, 2020: Meeting Notes March 17th, 2020: Meeting Notes February 4th, 2020: Meeting Notes January 7th, 2020: Meeting Notes December 3rd, 2019: Meeting Notes Members Greg Hankins (Chair) Aaron Hughes (Board Liaison) Arnold Nipper Ben Ryall Bijal Sanghani (Vice Chair) Rebecca Stani\u0107","title":"Outreach Committee"},{"location":"committee/outreach/#peeringdb-outreach-committee","text":"Purpose is to coordinate outreach and evanglism in the community. Interested in volunteering? Contact outreachcom@lists.peeringdb.com .","title":"PeeringDB Outreach Committee"},{"location":"committee/outreach/#peeringdb-outreach-committee-charter","text":"Approved by Board July 9th, 2020","title":"PeeringDB Outreach Committee Charter"},{"location":"committee/outreach/#scope","text":"The PeeringDB Outreach Committee (OC) is charged with the marketing efforts and running the organization's external engagement to continuously improve the value that PeeringDB delivers to the organisations registered with PeeringDB, and the broader community.","title":"Scope"},{"location":"committee/outreach/#out-of-scope","text":"The OC Committee does not work on other areas, such as product development, as these are managed by the other respective committees and defined in their respective charters.","title":"Out of Scope"},{"location":"committee/outreach/#deliverables","text":"Gather inputs from the other respective PeeringDB committees on developments and significant updates and ensure these are communicated the community Coordinate with partner committees and prepare presentations with relevant PeeringDB updates Identify and attend relevant community events to publicize PeeringDB developments and engage the community to drive additional records to be created Identify marketing opportunities for relevant PeeringDB activities Share key milestones and engage with the community through social media channels","title":"Deliverables"},{"location":"committee/outreach/#participation","text":"The PeeringDB Outreach Committee members serve a one-year renewable term. Volunteers can submit their candidacy to the Outreach Committee Chair. The Chair and Vice Chair will choose a new Outreach Committee member at any time they see the necessity to ensure the continuity of the Outreach Committee.","title":"Participation"},{"location":"committee/outreach/#communication","text":"Questions and suggestions for the Outreach Committee can be sent to","title":"Communication"},{"location":"committee/outreach/#decision-policy","text":"Outreach Committee members will decide by simple majority vote on contested issues called by the Outreach Committee Chair. PeeringDB Common Committee Charter Provisions:","title":"Decision Policy"},{"location":"committee/outreach/#dispute-resolution","text":"If the committee handles an issue in a manner in which a user believes that their view has not been adequately considered, their first action should be to raise the concern with the Committee Chair for further consideration. If the dispute is between the user and the Committee Chair then the issue may alternatively be raised with the Committee Vice Chair. If the dispute cannot be resolved the matter may be brought forward to the PeeringDB Board. The decision by the PeeringDB Board shall be final.","title":"Dispute Resolution"},{"location":"committee/outreach/#committee-chair-and-vice-chair","text":"The committee elects their Chair and Vice Chair from among their members, subject to PeeringDB Board approval. The Chair and Vice Chair work as a team and distribute the workload between themselves as they deem appropriate. Decisions should be unanimous, however the final decision on any matter is with the Chair. In case the Chair becomes unavailable, the Vice Chair may assume the position of Acting Chair. If the Chair or Vice Chair become permanently unavailable, replacement(s) are elected from the remaining committee members, subject to PeeringDB Board approval.","title":"Committee Chair and Vice Chair"},{"location":"committee/outreach/#meeting-notes","text":"August 4th, 2020: Meeting Notes July 7th, 2020: Meeting Notes June 2nd, 2020: Meeting Notes May 7th, 2020: Meeting Notes April 7th, 2020: Meeting Notes March 17th, 2020: Meeting Notes February 4th, 2020: Meeting Notes January 7th, 2020: Meeting Notes December 3rd, 2019: Meeting Notes","title":"Meeting Notes"},{"location":"committee/outreach/#members","text":"Greg Hankins (Chair) Aaron Hughes (Board Liaison) Arnold Nipper Ben Ryall Bijal Sanghani (Vice Chair) Rebecca Stani\u0107","title":"Members"},{"location":"committee/outreach/charter/","text":"PeeringDB Outreach Committee Charter Approved by Board July 9th, 2020 Scope The PeeringDB Outreach Committee (OC) is charged with the marketing efforts and running the organization's external engagement to continuously improve the value that PeeringDB delivers to the organisations registered with PeeringDB, and the broader community. Out of Scope The OC Committee does not work on other areas, such as product development, as these are managed by the other respective committees and defined in their respective charters. Deliverables Gather inputs from the other respective PeeringDB committees on developments and significant updates and ensure these are communicated the community Coordinate with partner committees and prepare presentations with relevant PeeringDB updates Identify and attend relevant community events to publicize PeeringDB developments and engage the community to drive additional records to be created Identify marketing opportunities for relevant PeeringDB activities Share key milestones and engage with the community through social media channels Participation The PeeringDB Outreach Committee members serve a one-year renewable term. Volunteers can submit their candidacy to the Outreach Committee Chair. The Chair and Vice Chair will choose a new Outreach Committee member at any time they see the necessity to ensure the continuity of the Outreach Committee. Communication Questions and suggestions for the Outreach Committee can be sent to Decision Policy Outreach Committee members will decide by simple majority vote on contested issues called by the Outreach Committee Chair. PeeringDB Common Committee Charter Provisions: Dispute Resolution If the committee handles an issue in a manner in which a user believes that their view has not been adequately considered, their first action should be to raise the concern with the Committee Chair for further consideration. If the dispute is between the user and the Committee Chair then the issue may alternatively be raised with the Committee Vice Chair. If the dispute cannot be resolved the matter may be brought forward to the PeeringDB Board. The decision by the PeeringDB Board shall be final. Committee Chair and Vice Chair The committee elects their Chair and Vice Chair from among their members, subject to PeeringDB Board approval. The Chair and Vice Chair work as a team and distribute the workload between themselves as they deem appropriate. Decisions should be unanimous, however the final decision on any matter is with the Chair. In case the Chair becomes unavailable, the Vice Chair may assume the position of Acting Chair. If the Chair or Vice Chair become permanently unavailable, replacement(s) are elected from the remaining committee members, subject to PeeringDB Board approval.","title":"Charter"},{"location":"committee/outreach/charter/#peeringdb-outreach-committee-charter","text":"Approved by Board July 9th, 2020","title":"PeeringDB Outreach Committee Charter"},{"location":"committee/outreach/charter/#scope","text":"The PeeringDB Outreach Committee (OC) is charged with the marketing efforts and running the organization's external engagement to continuously improve the value that PeeringDB delivers to the organisations registered with PeeringDB, and the broader community.","title":"Scope"},{"location":"committee/outreach/charter/#out-of-scope","text":"The OC Committee does not work on other areas, such as product development, as these are managed by the other respective committees and defined in their respective charters.","title":"Out of Scope"},{"location":"committee/outreach/charter/#deliverables","text":"Gather inputs from the other respective PeeringDB committees on developments and significant updates and ensure these are communicated the community Coordinate with partner committees and prepare presentations with relevant PeeringDB updates Identify and attend relevant community events to publicize PeeringDB developments and engage the community to drive additional records to be created Identify marketing opportunities for relevant PeeringDB activities Share key milestones and engage with the community through social media channels","title":"Deliverables"},{"location":"committee/outreach/charter/#participation","text":"The PeeringDB Outreach Committee members serve a one-year renewable term. Volunteers can submit their candidacy to the Outreach Committee Chair. The Chair and Vice Chair will choose a new Outreach Committee member at any time they see the necessity to ensure the continuity of the Outreach Committee.","title":"Participation"},{"location":"committee/outreach/charter/#communication","text":"Questions and suggestions for the Outreach Committee can be sent to","title":"Communication"},{"location":"committee/outreach/charter/#decision-policy","text":"Outreach Committee members will decide by simple majority vote on contested issues called by the Outreach Committee Chair. PeeringDB Common Committee Charter Provisions:","title":"Decision Policy"},{"location":"committee/outreach/charter/#dispute-resolution","text":"If the committee handles an issue in a manner in which a user believes that their view has not been adequately considered, their first action should be to raise the concern with the Committee Chair for further consideration. If the dispute is between the user and the Committee Chair then the issue may alternatively be raised with the Committee Vice Chair. If the dispute cannot be resolved the matter may be brought forward to the PeeringDB Board. The decision by the PeeringDB Board shall be final.","title":"Dispute Resolution"},{"location":"committee/outreach/charter/#committee-chair-and-vice-chair","text":"The committee elects their Chair and Vice Chair from among their members, subject to PeeringDB Board approval. The Chair and Vice Chair work as a team and distribute the workload between themselves as they deem appropriate. Decisions should be unanimous, however the final decision on any matter is with the Chair. In case the Chair becomes unavailable, the Vice Chair may assume the position of Acting Chair. If the Chair or Vice Chair become permanently unavailable, replacement(s) are elected from the remaining committee members, subject to PeeringDB Board approval.","title":"Committee Chair and Vice Chair"},{"location":"committee/product/","text":"PeeringDB Product Committee Purpose is to study and recommend feature needs. Interested in volunteering? Contact productcom@lists.peeringdb.com . PeeringDB Product Committee Charter Approved by Board July 7th, 2017 Scope The PeeringDB Product Committee (PC) is charged with steering the future product development and running the market outreach efforts to continuously improve the value that PeeringDB delivers to the networks registered with PeeringDB, and the broader community. Out of Scope The PC does not drive PeeringDB improvements related to the administrative interfaces functions used by the PeeringDB Admin Committee. The PC does not consider PeeringDB improvements related to the server, storage, hosting or network infrastructure. Deliverables Gather inputs from stakeholders regarding the evolution of PeeringDB in terms of product features and overall long term objectives. Formulate the long term objectives and validate them with the PeeringDB Board and the members of the PeeringDB Governance mailing list. Document and maintain workflow process to handle requests and issues. Maintain the product roadmap and feature request backlog and makes them publicly accessible. Create and maintain PeeringDB product documentation and presentation materials. Develop market outreach and evangelisation to increase the uptake of PeeringDB use and improve data quality. Propose new features or enhancements based on the long term objectives and validates significant product evolutions with key stakeholders. Collaboration The PC shall work with other PeeringDB committees to ensure an equitable division of development resources in recognition of the volunteer efforts that are ensuring the daily operations. Participation The PeeringDB Product Committee members serve a 2 years renewable term, potential volunteers may submit their candidacy to the PeeringDB Board. The product committee will select their own Chair and Vice Chair by simple majority vote. The Board may add or remove members at any time it deems necessary. Communication Questions and suggestions for the Product Committee can be sent to Key development communication and community input gathering efforts will be conducted via the PeeringDB Governance Mailinglist pdb-gov@lists.peeringdb.com All issues and the product roadmap and feature backlog can be found at https://github.com/peeringdb/peeringdb/issues Decision Policy Product Committee members will decide by simple majority vote on contested issues called by the Product Committee Chair. PeeringDB Common Committee Charter Provisions: Dispute Resolution If the committee handles an issue in a manner in which a user believes that their view has not been adequately considered, their first action should be to raise the concern with the Committee Chair for further consideration. If the dispute is between the user and the Committee Chair then the issue may alternatively be raised with the Committee Vice Chair. If the dispute cannot be resolved the matter may be brought forward to the PeeringDB Board. The decision by the PeeringDB Board shall be final. Committee Chair and Vice Chair The committee elects their Chair and Vice Chair from among their members, subject to PeeringDB Board approval. The Chair and Vice Chair work as a team and distribute the workload between themselves as they deem appropriate. Decisions should be unanimous, however the final decision on any matter is with the Chair. In case the Chair becomes unavailable, the Vice Chair may assume the position of Acting Chair. If the Chair or Vice Chair become permanently unavailable, replacement(s) are elected from the remaining committee members, subject to PeeringDB Board approval. Decision Making Process and Workflow Product Committee members are responsible for driving the development of PeeringDB. To do this, GitHub issues are used to track proposed and in progress work. Product Committee members play two roles in driving forward work: 1) As a shepherd - responsible for driving consensus for a given issue 2) As a stakeholder - voting on a consensus that has been reached Each Product Committee member will choose issues to shepherd to a decision. They will indicate responsibility for this task by assigning the issue to themselves and placing it in the Decide queue. To decide whether we act on a given issue that has been reported, a stakeholder group will be formed. This group will consist of Product Committee members, who are responsible for representing the users of PeeringDB. A stakeholder group on a given issue must consist of at least three Product Committee members, including the shepherding member. Any Product Committee member can be a stakeholder in the decision on an issue. They become a stakeholder on a given issue by either commenting on the issue on GitHub or participating in discussion of the issue on the Product Committee Mailing list. It is up to the shepherding member to help reach a unanimous consensus within the stakeholder group on what should be done with the issue - including not acting on it. If and only if there are opposing views on how to proceed, and unanimous consensus cannot be reached by the stakeholder committee members, decisions fall to the entire Product Committee (see below). The final proposal of how to resolve each issue, along with votes from stakeholders must be documented in the GitHub issue to be considered to have reached consensus. Product Committee members must document any offline discussion in the GitHub issue to ensure transparency of the discussion process. Issues in the Decide queue are regularly reviewed by the Product Committee to make sure the most impactful issues are being moved along to resolution. All issues in the Decide queue will be reviewed in the monthly Product Committee call to ensure stakeholders have reached consensus and to give members who have not participated in the issue an opportunity to participate. After an issue with consensus has been reviewed, Product Committee members who disagree with the proposal have five days after the monthly Product Committee call to vote against the proposed solution, otherwise the issue will move to the backlog. For any issues where consensus cannot be reached, an issue may move forward only if a quorum of 50% or more of the Product Committee has no more than 25% of the quorum in opposition to the issue. Meeting Notes October 1st, 2020: Meeting Notes September 3rd, 2020: Meeting Notes August 6th, 2020: Meeting Notes July 2nd, 2020: Meeting Notes June 4th, 2020: Meeting Notes May 7th, 2020: Meeting Notes April 2nd, 2020: Meeting Notes February 6th, 2020: Meeting Notes January 9th, 2020: Meeting Notes November 14th, 2019: Meeting Notes October 3rd, 2019: Meeting Notes September 5th, 2019: Meeting Notes August 8th, 2019: Meeting Notes July 11th, 2019: Meeting Notes June 7th, 2019: Meeting Notes May 2nd, 2019: Meeting Notes March 7th, 2019: Meeting Notes February 7th, 2019: Meeting Notes January 3rd, 2019: Meeting Notes December 6th, 2018: Meeting Notes November 1st, 2018: Meeting Notes October 4th, 2018: Meeting Notes September 6th, 2018: Meeting Notes July 5th, 2018: Meeting Notes June 7th, 2018: Meeting Notes April 5th, 2018: Meeting Notes March 14th, 2018: Meeting Notes January 4th, 2018: Meeting Notes December 7th, 2017: Meeting Notes October 12th, 2017: Meeting Notes August 3rd, 2017: Meeting Notes July 6th, 2017: Meeting Notes June 1st, 2017: Meeting Notes April 13th, 2017: Meeting Notes March 21st, 2017: Meeting Notes Members Yan Berthier Matt Griswold (Vice Chair) Greg Hankins (Outreach Liaison) Aaron Hughes (Board Liaison) Shane Kerr Stephen McManus (Chair) Arnold Nipper Yolandi Robinson Job Snijders Leo Vegoda (Product Manager)","title":"Product Committee"},{"location":"committee/product/#peeringdb-product-committee","text":"Purpose is to study and recommend feature needs. Interested in volunteering? Contact productcom@lists.peeringdb.com .","title":"PeeringDB Product Committee"},{"location":"committee/product/#peeringdb-product-committee-charter","text":"Approved by Board July 7th, 2017","title":"PeeringDB Product Committee Charter"},{"location":"committee/product/#scope","text":"The PeeringDB Product Committee (PC) is charged with steering the future product development and running the market outreach efforts to continuously improve the value that PeeringDB delivers to the networks registered with PeeringDB, and the broader community.","title":"Scope"},{"location":"committee/product/#out-of-scope","text":"The PC does not drive PeeringDB improvements related to the administrative interfaces functions used by the PeeringDB Admin Committee. The PC does not consider PeeringDB improvements related to the server, storage, hosting or network infrastructure.","title":"Out of Scope"},{"location":"committee/product/#deliverables","text":"Gather inputs from stakeholders regarding the evolution of PeeringDB in terms of product features and overall long term objectives. Formulate the long term objectives and validate them with the PeeringDB Board and the members of the PeeringDB Governance mailing list. Document and maintain workflow process to handle requests and issues. Maintain the product roadmap and feature request backlog and makes them publicly accessible. Create and maintain PeeringDB product documentation and presentation materials. Develop market outreach and evangelisation to increase the uptake of PeeringDB use and improve data quality. Propose new features or enhancements based on the long term objectives and validates significant product evolutions with key stakeholders.","title":"Deliverables"},{"location":"committee/product/#collaboration","text":"The PC shall work with other PeeringDB committees to ensure an equitable division of development resources in recognition of the volunteer efforts that are ensuring the daily operations.","title":"Collaboration"},{"location":"committee/product/#participation","text":"The PeeringDB Product Committee members serve a 2 years renewable term, potential volunteers may submit their candidacy to the PeeringDB Board. The product committee will select their own Chair and Vice Chair by simple majority vote. The Board may add or remove members at any time it deems necessary.","title":"Participation"},{"location":"committee/product/#communication","text":"Questions and suggestions for the Product Committee can be sent to Key development communication and community input gathering efforts will be conducted via the PeeringDB Governance Mailinglist pdb-gov@lists.peeringdb.com All issues and the product roadmap and feature backlog can be found at https://github.com/peeringdb/peeringdb/issues","title":"Communication"},{"location":"committee/product/#decision-policy","text":"Product Committee members will decide by simple majority vote on contested issues called by the Product Committee Chair. PeeringDB Common Committee Charter Provisions:","title":"Decision Policy"},{"location":"committee/product/#dispute-resolution","text":"If the committee handles an issue in a manner in which a user believes that their view has not been adequately considered, their first action should be to raise the concern with the Committee Chair for further consideration. If the dispute is between the user and the Committee Chair then the issue may alternatively be raised with the Committee Vice Chair. If the dispute cannot be resolved the matter may be brought forward to the PeeringDB Board. The decision by the PeeringDB Board shall be final.","title":"Dispute Resolution"},{"location":"committee/product/#committee-chair-and-vice-chair","text":"The committee elects their Chair and Vice Chair from among their members, subject to PeeringDB Board approval. The Chair and Vice Chair work as a team and distribute the workload between themselves as they deem appropriate. Decisions should be unanimous, however the final decision on any matter is with the Chair. In case the Chair becomes unavailable, the Vice Chair may assume the position of Acting Chair. If the Chair or Vice Chair become permanently unavailable, replacement(s) are elected from the remaining committee members, subject to PeeringDB Board approval.","title":"Committee Chair and Vice Chair"},{"location":"committee/product/#decision-making-process-and-workflow","text":"Product Committee members are responsible for driving the development of PeeringDB. To do this, GitHub issues are used to track proposed and in progress work. Product Committee members play two roles in driving forward work: 1) As a shepherd - responsible for driving consensus for a given issue 2) As a stakeholder - voting on a consensus that has been reached Each Product Committee member will choose issues to shepherd to a decision. They will indicate responsibility for this task by assigning the issue to themselves and placing it in the Decide queue. To decide whether we act on a given issue that has been reported, a stakeholder group will be formed. This group will consist of Product Committee members, who are responsible for representing the users of PeeringDB. A stakeholder group on a given issue must consist of at least three Product Committee members, including the shepherding member. Any Product Committee member can be a stakeholder in the decision on an issue. They become a stakeholder on a given issue by either commenting on the issue on GitHub or participating in discussion of the issue on the Product Committee Mailing list. It is up to the shepherding member to help reach a unanimous consensus within the stakeholder group on what should be done with the issue - including not acting on it. If and only if there are opposing views on how to proceed, and unanimous consensus cannot be reached by the stakeholder committee members, decisions fall to the entire Product Committee (see below). The final proposal of how to resolve each issue, along with votes from stakeholders must be documented in the GitHub issue to be considered to have reached consensus. Product Committee members must document any offline discussion in the GitHub issue to ensure transparency of the discussion process. Issues in the Decide queue are regularly reviewed by the Product Committee to make sure the most impactful issues are being moved along to resolution. All issues in the Decide queue will be reviewed in the monthly Product Committee call to ensure stakeholders have reached consensus and to give members who have not participated in the issue an opportunity to participate. After an issue with consensus has been reviewed, Product Committee members who disagree with the proposal have five days after the monthly Product Committee call to vote against the proposed solution, otherwise the issue will move to the backlog. For any issues where consensus cannot be reached, an issue may move forward only if a quorum of 50% or more of the Product Committee has no more than 25% of the quorum in opposition to the issue.","title":"Decision Making Process and Workflow"},{"location":"committee/product/#meeting-notes","text":"October 1st, 2020: Meeting Notes September 3rd, 2020: Meeting Notes August 6th, 2020: Meeting Notes July 2nd, 2020: Meeting Notes June 4th, 2020: Meeting Notes May 7th, 2020: Meeting Notes April 2nd, 2020: Meeting Notes February 6th, 2020: Meeting Notes January 9th, 2020: Meeting Notes November 14th, 2019: Meeting Notes October 3rd, 2019: Meeting Notes September 5th, 2019: Meeting Notes August 8th, 2019: Meeting Notes July 11th, 2019: Meeting Notes June 7th, 2019: Meeting Notes May 2nd, 2019: Meeting Notes March 7th, 2019: Meeting Notes February 7th, 2019: Meeting Notes January 3rd, 2019: Meeting Notes December 6th, 2018: Meeting Notes November 1st, 2018: Meeting Notes October 4th, 2018: Meeting Notes September 6th, 2018: Meeting Notes July 5th, 2018: Meeting Notes June 7th, 2018: Meeting Notes April 5th, 2018: Meeting Notes March 14th, 2018: Meeting Notes January 4th, 2018: Meeting Notes December 7th, 2017: Meeting Notes October 12th, 2017: Meeting Notes August 3rd, 2017: Meeting Notes July 6th, 2017: Meeting Notes June 1st, 2017: Meeting Notes April 13th, 2017: Meeting Notes March 21st, 2017: Meeting Notes","title":"Meeting Notes"},{"location":"committee/product/#members","text":"Yan Berthier Matt Griswold (Vice Chair) Greg Hankins (Outreach Liaison) Aaron Hughes (Board Liaison) Shane Kerr Stephen McManus (Chair) Arnold Nipper Yolandi Robinson Job Snijders Leo Vegoda (Product Manager)","title":"Members"},{"location":"committee/product/charter/","text":"PeeringDB Product Committee Charter Approved by Board July 7th, 2017 Scope The PeeringDB Product Committee (PC) is charged with steering the future product development and running the market outreach efforts to continuously improve the value that PeeringDB delivers to the networks registered with PeeringDB, and the broader community. Out of Scope The PC does not drive PeeringDB improvements related to the administrative interfaces functions used by the PeeringDB Admin Committee. The PC does not consider PeeringDB improvements related to the server, storage, hosting or network infrastructure. Deliverables Gather inputs from stakeholders regarding the evolution of PeeringDB in terms of product features and overall long term objectives. Formulate the long term objectives and validate them with the PeeringDB Board and the members of the PeeringDB Governance mailing list. Document and maintain workflow process to handle requests and issues. Maintain the product roadmap and feature request backlog and makes them publicly accessible. Create and maintain PeeringDB product documentation and presentation materials. Develop market outreach and evangelisation to increase the uptake of PeeringDB use and improve data quality. Propose new features or enhancements based on the long term objectives and validates significant product evolutions with key stakeholders. Collaboration The PC shall work with other PeeringDB committees to ensure an equitable division of development resources in recognition of the volunteer efforts that are ensuring the daily operations. Participation The PeeringDB Product Committee members serve a 2 years renewable term, potential volunteers may submit their candidacy to the PeeringDB Board. The product committee will select their own Chair and Vice Chair by simple majority vote. The Board may add or remove members at any time it deems necessary. Communication Questions and suggestions for the Product Committee can be sent to Key development communication and community input gathering efforts will be conducted via the PeeringDB Governance Mailinglist pdb-gov@lists.peeringdb.com All issues and the product roadmap and feature backlog can be found at https://github.com/peeringdb/peeringdb/issues Decision Policy Product Committee members will decide by simple majority vote on contested issues called by the Product Committee Chair. PeeringDB Common Committee Charter Provisions: Dispute Resolution If the committee handles an issue in a manner in which a user believes that their view has not been adequately considered, their first action should be to raise the concern with the Committee Chair for further consideration. If the dispute is between the user and the Committee Chair then the issue may alternatively be raised with the Committee Vice Chair. If the dispute cannot be resolved the matter may be brought forward to the PeeringDB Board. The decision by the PeeringDB Board shall be final. Committee Chair and Vice Chair The committee elects their Chair and Vice Chair from among their members, subject to PeeringDB Board approval. The Chair and Vice Chair work as a team and distribute the workload between themselves as they deem appropriate. Decisions should be unanimous, however the final decision on any matter is with the Chair. In case the Chair becomes unavailable, the Vice Chair may assume the position of Acting Chair. If the Chair or Vice Chair become permanently unavailable, replacement(s) are elected from the remaining committee members, subject to PeeringDB Board approval.","title":"Charter"},{"location":"committee/product/charter/#peeringdb-product-committee-charter","text":"Approved by Board July 7th, 2017","title":"PeeringDB Product Committee Charter"},{"location":"committee/product/charter/#scope","text":"The PeeringDB Product Committee (PC) is charged with steering the future product development and running the market outreach efforts to continuously improve the value that PeeringDB delivers to the networks registered with PeeringDB, and the broader community.","title":"Scope"},{"location":"committee/product/charter/#out-of-scope","text":"The PC does not drive PeeringDB improvements related to the administrative interfaces functions used by the PeeringDB Admin Committee. The PC does not consider PeeringDB improvements related to the server, storage, hosting or network infrastructure.","title":"Out of Scope"},{"location":"committee/product/charter/#deliverables","text":"Gather inputs from stakeholders regarding the evolution of PeeringDB in terms of product features and overall long term objectives. Formulate the long term objectives and validate them with the PeeringDB Board and the members of the PeeringDB Governance mailing list. Document and maintain workflow process to handle requests and issues. Maintain the product roadmap and feature request backlog and makes them publicly accessible. Create and maintain PeeringDB product documentation and presentation materials. Develop market outreach and evangelisation to increase the uptake of PeeringDB use and improve data quality. Propose new features or enhancements based on the long term objectives and validates significant product evolutions with key stakeholders.","title":"Deliverables"},{"location":"committee/product/charter/#collaboration","text":"The PC shall work with other PeeringDB committees to ensure an equitable division of development resources in recognition of the volunteer efforts that are ensuring the daily operations.","title":"Collaboration"},{"location":"committee/product/charter/#participation","text":"The PeeringDB Product Committee members serve a 2 years renewable term, potential volunteers may submit their candidacy to the PeeringDB Board. The product committee will select their own Chair and Vice Chair by simple majority vote. The Board may add or remove members at any time it deems necessary.","title":"Participation"},{"location":"committee/product/charter/#communication","text":"Questions and suggestions for the Product Committee can be sent to Key development communication and community input gathering efforts will be conducted via the PeeringDB Governance Mailinglist pdb-gov@lists.peeringdb.com All issues and the product roadmap and feature backlog can be found at https://github.com/peeringdb/peeringdb/issues","title":"Communication"},{"location":"committee/product/charter/#decision-policy","text":"Product Committee members will decide by simple majority vote on contested issues called by the Product Committee Chair. PeeringDB Common Committee Charter Provisions:","title":"Decision Policy"},{"location":"committee/product/charter/#dispute-resolution","text":"If the committee handles an issue in a manner in which a user believes that their view has not been adequately considered, their first action should be to raise the concern with the Committee Chair for further consideration. If the dispute is between the user and the Committee Chair then the issue may alternatively be raised with the Committee Vice Chair. If the dispute cannot be resolved the matter may be brought forward to the PeeringDB Board. The decision by the PeeringDB Board shall be final.","title":"Dispute Resolution"},{"location":"committee/product/charter/#committee-chair-and-vice-chair","text":"The committee elects their Chair and Vice Chair from among their members, subject to PeeringDB Board approval. The Chair and Vice Chair work as a team and distribute the workload between themselves as they deem appropriate. Decisions should be unanimous, however the final decision on any matter is with the Chair. In case the Chair becomes unavailable, the Vice Chair may assume the position of Acting Chair. If the Chair or Vice Chair become permanently unavailable, replacement(s) are elected from the remaining committee members, subject to PeeringDB Board approval.","title":"Committee Chair and Vice Chair"},{"location":"committee/product/workflow/","text":"Decision Making Process and Workflow Product Committee members are responsible for driving the development of PeeringDB. To do this, GitHub issues are used to track proposed and in progress work. Product Committee members play two roles in driving forward work: 1) As a shepherd - responsible for driving consensus for a given issue 2) As a stakeholder - voting on a consensus that has been reached Each Product Committee member will choose issues to shepherd to a decision. They will indicate responsibility for this task by assigning the issue to themselves and placing it in the Decide queue. To decide whether we act on a given issue that has been reported, a stakeholder group will be formed. This group will consist of Product Committee members, who are responsible for representing the users of PeeringDB. A stakeholder group on a given issue must consist of at least three Product Committee members, including the shepherding member. Any Product Committee member can be a stakeholder in the decision on an issue. They become a stakeholder on a given issue by either commenting on the issue on GitHub or participating in discussion of the issue on the Product Committee Mailing list. It is up to the shepherding member to help reach a unanimous consensus within the stakeholder group on what should be done with the issue - including not acting on it. If and only if there are opposing views on how to proceed, and unanimous consensus cannot be reached by the stakeholder committee members, decisions fall to the entire Product Committee (see below). The final proposal of how to resolve each issue, along with votes from stakeholders must be documented in the GitHub issue to be considered to have reached consensus. Product Committee members must document any offline discussion in the GitHub issue to ensure transparency of the discussion process. Issues in the Decide queue are regularly reviewed by the Product Committee to make sure the most impactful issues are being moved along to resolution. All issues in the Decide queue will be reviewed in the monthly Product Committee call to ensure stakeholders have reached consensus and to give members who have not participated in the issue an opportunity to participate. After an issue with consensus has been reviewed, Product Committee members who disagree with the proposal have five days after the monthly Product Committee call to vote against the proposed solution, otherwise the issue will move to the backlog. For any issues where consensus cannot be reached, an issue may move forward only if a quorum of 50% or more of the Product Committee has no more than 25% of the quorum in opposition to the issue.","title":"Workflow"},{"location":"committee/product/workflow/#decision-making-process-and-workflow","text":"Product Committee members are responsible for driving the development of PeeringDB. To do this, GitHub issues are used to track proposed and in progress work. Product Committee members play two roles in driving forward work: 1) As a shepherd - responsible for driving consensus for a given issue 2) As a stakeholder - voting on a consensus that has been reached Each Product Committee member will choose issues to shepherd to a decision. They will indicate responsibility for this task by assigning the issue to themselves and placing it in the Decide queue. To decide whether we act on a given issue that has been reported, a stakeholder group will be formed. This group will consist of Product Committee members, who are responsible for representing the users of PeeringDB. A stakeholder group on a given issue must consist of at least three Product Committee members, including the shepherding member. Any Product Committee member can be a stakeholder in the decision on an issue. They become a stakeholder on a given issue by either commenting on the issue on GitHub or participating in discussion of the issue on the Product Committee Mailing list. It is up to the shepherding member to help reach a unanimous consensus within the stakeholder group on what should be done with the issue - including not acting on it. If and only if there are opposing views on how to proceed, and unanimous consensus cannot be reached by the stakeholder committee members, decisions fall to the entire Product Committee (see below). The final proposal of how to resolve each issue, along with votes from stakeholders must be documented in the GitHub issue to be considered to have reached consensus. Product Committee members must document any offline discussion in the GitHub issue to ensure transparency of the discussion process. Issues in the Decide queue are regularly reviewed by the Product Committee to make sure the most impactful issues are being moved along to resolution. All issues in the Decide queue will be reviewed in the monthly Product Committee call to ensure stakeholders have reached consensus and to give members who have not participated in the issue an opportunity to participate. After an issue with consensus has been reviewed, Product Committee members who disagree with the proposal have five days after the monthly Product Committee call to vote against the proposed solution, otherwise the issue will move to the backlog. For any issues where consensus cannot be reached, an issue may move forward only if a quorum of 50% or more of the Product Committee has no more than 25% of the quorum in opposition to the issue.","title":"Decision Making Process and Workflow"},{"location":"release_notes/","text":"Release Notes The release notes list the GitHub issues and a summary of what has changed in PeeringDB software releases. Each new release has a one week beta test period on the beta server before it goes live. The beta and new releases are announced on the PeeringDB Announce Mailing List and on Twitter , LinkedIn and Facebook . This page was started in April 2020, and will only have information about PeeringDB releases starting from that date. Release 2.23.0 Beta Announcement Date: 30 September, 2020 Release Date: 7 October, 2020 GitHub Issue Summary #833 - IX-F Importer: Add failed email resending Implement re-send mechanic for emails that could not be sent (indicated by a sent value of null). When re-sending an email add a note to the email stating \"This email could not be delivered initially and may contain stale information\". Add a field to the admin-com import emails table to show this note as well. Update sent if send is successful #832 - IX-F Importer: suggested update when it should be add + remove In some edge cases a deletion will end up as a requirement incorrectly to a legitimate new entry still. See #770 #816 #831 - [prod] IX-F importer: NameError: name 'EmailMultiAlternatives' is not defined Fixes broken email function of ix-f importer #826 - Make technical poc mandatory when adding a netixlan Upon creating a netixlan object check that net has at least one ( Technical , NOC , Policy ) poc and that the poc has an e-mail address. If not ask them to create one first. Visibility of at least one ( Technical , NOC , Policy ) poc has to be \"Users\" resp. \"Public\" #825 - [beta] IX-F importer: Make Importer return non-zero when there is an error that Ops should see Improvements to ix-f importer that allow for easier notification and tracking of errors for the Ops team #824 - IX-F Preview - shows the consolidated delete operation when it shouldn't Simplified the UI for consolidated modifications to improve user understanding #759 - Describe the 'never-via-routeservers' flag Add tooltip for never-via-routeservers option: \"Indicates if this network will announce its routes via route servers or not\" #571 - Facility registration tool adds identifier Fixes small UI bug in facility registration tool used by the Admin Committee #481 - Add min_speed and max_speed to ixlan Based on the discussion in #475 adds a new global setting that limits netixlan speed values now. It's not a property on the ixlan anymore. #371 - Clean up users in verification queue A tool to delete user entries older than 90 days from the so-called verification queue and run it on a regular schedule #370 - Make Website mandatory for suggesting a facility Website is now mandatory when suggesting a facility but zipcode only mandatory for countries that have zipcodes #321 - Typos in locale Fixes a number of typographical errors Release 2.22.0 Beta Announcement Date: 15 July, 2020 Release Date: 26 August, 2020 GitHub Issue Summary #249 - Add the IX-F Member Export URL to the ixlan API endpoint There are two new fields in the ixlan section resp. the ixlan object, called ixf_ixp_member_list_url and ixf_ixp_member_list_url_visible. The first one contains the URL to the IX-F import file while the second governs the visibility of the URL. Values are the same as for the poc object, namely \"Public\", \"Users\" and \"Private\", defaulting to \"Private\" (i.e. or users who are members of the org). #268 - Database: unique constraints This issue fixes internal DB behaviour. #358 - Lock ASN once the record is created Once a network has been created, the field asn is made read-only. As the ASN is unique there is no reason to change it. Making the field read-only is to prevent unwanted side effects. #431 - Null 'rencode' from facility Null out all values for legacy unused rencode field, and make it read only to prepare for removal in PDB v3 [#625] (https://github.com/peeringdb/peeringdb/issues/625). #600 - Visibility for \"Allow IXP update\" switch A new field is added to the API net object, called allow_ixp_update. Furthermore, a line is added in global stats in the footer with a count (called \"Automated Networks\") of the networks which have \"Allow IXP Update\" enabled. #649 - Possible for 'ok' ixpfx to exist in 'pending' ixlan This issue fixes an internal bug. #683 - Add net_count_ixf field to ix object A field is added to the API object ix, called net_count_ixf, which indicates the number of net objects the exchange has in their IX-F JSON if they provide one. Otherwise, the value is null. #696 - Lock some objects from being deleted by the owner To protect operational data objects fac, ix, ixlan and org are prevented from being deleted as long as there are other objects related to it. First, these objects must be deleted before the object itself can be deleted. The attempt to delete such a protected object gives an error message and also opens a ticket with the PeeringDB support. #697 - Creating, changing, and deleting a netixlan object We completely re-implemented the way a connection to an exchange is handled. This new procedure allows both for a safe heads up a network can give to their peers as well as a safe way for exchanges to get rid of stale entries. Moreover, it allows networks to easily acknowledge new entries at exchanges which use the IX-F importer feature. See also the webinar for detailed information on this new procedure. Release 2.21.0 Beta Announcement Date: 24 June, 2020 Release Date: 1 July, 2020 GitHub Issue Summary #72 - Enable sort and reverse sort of IP column in IX display Sort and reverse sort of IP column in IX display are added. Sort of the IP addresses in the expected natural order. The IPv4 address is the primary sort key. The IPv6 address is the secondary key. #121 - missing delete button for organisations New feature. An admin user is able to delete an org if it has no live objects under it. #290 - Offer 2FA 2FA is offered now. The implementation includes optional 2FA using TOTP is offered there is a knob in the user profile to enable and set it up email recovery is added using the verified user email address an icon is added in the org admin section to denote to org admins if users have 2FA enabled #352 - Mark IXP peering LAN as bogon Allow IXP to tag their LAN prefixes as bogons. In general, LAN prefixes should not be visible in the DFZ. If it should be visible, IXPs are able to debogonise them #356 - Sorting by clicking table headers should use local-compare Bugfix. Sorting now honours locale-sorting #519 - Make spelling of traffic levels consistent This is a bug fix and a minor improvement. Spelling is made consistent and traffic levels up to 100+Tbps are added. #526 - Show \"Last Updated\" fields on fac, ix, org records A \"Last Updated\" field is visible now for fac, ix, and org objects #537 - Posting https://www.peeringdb.com onto social media doesn't select a good preview image Add opengraph image for page preview. #566 - Should deleted personal data be accessable through the API? If a poc object is deleted it is made immediately non-gettable via the API, too. In case the corresponding net object was deleted unintentionally the object is still kept in the DB. After 30 days it will be hard-deleted. #569 - Don't return any POC data with status=deleted POC objects do have a visibility scope. If a POC record is deleted it should not be able to retrieve it at all, even if visibility had been set to \"public\" before. The data will still be kept internally for 30 days for rollback if the deletion happened unintentionally. After 30 days the record will be hard-deleted. #580 - Add a clear error message, when user tries to re-add a previously deleted facility Bug fix for an unclear behaviour. If a connection from a network to a facility was deleted the user was unable to re-add this connection by themselves and an unclear error message was given. Now, the user is able to re-add the connection. #618 - Support alternative direction of writing, e.g. Arabic For right-to-left written languages, the entire layout of the PeeringDB website has to be flipped around. #644 - Undeleting an ixlan with an emtpy IPv4 XOR IPv6 field throws a silly error Bugfix for the Admin Committee UI. An empty field was considered to be a legit non-null value and the system hence enforced uniqueness #650 - Add pointer from API docs to tutorial A URL is added from the API documentation website to the PeeringDB tutorials #654 - Add pointer from API docs to tutorial Bugfix for the Admin Committee UI. #663 - change default encoding of API calls to 'utf-8' The output of API calls will change from content-type: application/json; charset=iso-8859-1 to content-type: application/json; charset=utf-8 #664 - Selection should only present undeleted objects Admin Committee only related. Only non-deleted should be presented for selection #666 - Selection should only present undeleted objects When changing owner of an ix admin GUI borks because of \"Ixlan for exchange already exists\" #669 - Add help text to \"Add {Facility, Network, Exchange} tab Added a better help text to make crystal clear that adding a Facility, Network, or Exchange means that you are owning this object. #679 - Add read-only Superuser Provide PC members with a read-only access to the Admin UI. #712 - User is unable to update their net record Bug fix. Missing pointer to where the non-compliant value is Release 2.20.2 Release Date: 23 April, 2020 GitHub Issue Summary #707 - Make source not required for IRR records Making source not required for IRR records. This requirement was an oversight during implementation of [#151 - Validation of IRR Records] (https://github.com/peeringdb/peeringdb/issues/151) that was released with 2.20.0 - see below. Product Committee revisited the issue after 2.20.0 and reports of concern from community and decided to retract the requirement in an emergency release Release 2.20.1 Release Date: 21 April, 2020 GitHub Issue Summary #702 - Requests from peeringdb-py error 500 Emergency release for a config change Release 2.20.0 Beta Announcement Date: 15 April, 2020 Release Date: 21 April, 2020 GitHub Issue Summary #151 - Validation of IRR Records To make the IRR as-set/route-set field of more operational value, strict rules apply the as-set/rs-set name has to conform to RFC 2622 (5.1 and 5.2) the source may be specified by AS-SET@SOURCE or SOURCE::AS-SET (preferred) valid sources are taken from the list of known IRRs multiple values must be separated by either ,, , or , (i.e. comma, space or comma followed by space) #189 - Improve explanatory and help text A clear help text is added for requesting affiliation to an organisation. #251 - Limit number of concurrent affiliation requests per user In order to reduce organization affiliation request spamming, the number of pending organization requests has been limited to 5. #295 Desk pro tickets - DeskPRO tickets This is a bug fix and only affects the Admin UI. #378 - Add contact information for Facilities (fac) the same way as for ix and net Contact information is added to Facilities and IXP. #452 - Org/Network name of a sponsor should not link to /sponsors, only the sponsor badge should This is a bug fix. From now on only when clicking on the sponsor badge will direct to the sponsor page. #462 - Route-server URL starting with ssh:// Add SSH as supported protocol. #539 - Add attribute 'operational' to 'netixlan' This is a new feature and allows networks to give early notice to their peers that they soon will show up at an IXP. There is a new check box when adding an IXP connection. By default, a connection is considered operational and the box is ticked. When the connection is still in provisioning status, please untick the box. When viewing, the warning glyphicon is shown right to the network name. The correspondent API object netixlan is enhanced by a boolean field operational defaulting to true. This feature is in line with the Data Ownership Policy . #548 - containerize server Internal software deployment system has been changed to use containers which reduces time spent by the ops team for deployments, allows for better scaling, and reduces the cost of entry for new developers to write and test their code. #555 - Notes field translate button disappears This is a bug fix. The \"Translate\" button is there for a moment and then disappeared. #557 - Show all languages on beta, even if translation is not ready for prod As soon as a new translation is starting it is available on the beta to help the translators and to encourage the community for input. #598 - bug caused by the org affiliationship request without an asn This is a bug fix and is only relevant for the PeeringDB Admin Committee. #609 - When creating an ix via the API also return ixlan_id and ixpfx_id When creating an IX record via API, the call will also return the implicitly created ixlan_id and ixpfx_id. This makes it simpler and reduces the number of calls that need to be made to the API. #615 - Insert links into ID fields in DESKPRO AUTOASN tickets This only affects tickets generated for PeeringDB Admin Committee. A link to the object in the UI is added. #626 - Update API docs Internal mechanisms for generating the API docs have been updated to current standards. This also allows for easier user contributions to the docs themselves. #634 - Remove support for python2 Python 2.7 and 3.4 support is being removed from PeeringDB packages. #636 - Don't create a new net object, when there only is an ASN block This is a bug fix and is only relevant for the PeeringDB Admin Committee. #667 - Fix use autocomplete fields in the admincom controlpanel to speed up loading times This is a bug fix and is only relevant for the PeeringDB Admin Committee.","title":"Release Notes"},{"location":"release_notes/#release-notes","text":"The release notes list the GitHub issues and a summary of what has changed in PeeringDB software releases. Each new release has a one week beta test period on the beta server before it goes live. The beta and new releases are announced on the PeeringDB Announce Mailing List and on Twitter , LinkedIn and Facebook . This page was started in April 2020, and will only have information about PeeringDB releases starting from that date.","title":"Release Notes"},{"location":"release_notes/#release-2230","text":"Beta Announcement Date: 30 September, 2020 Release Date: 7 October, 2020 GitHub Issue Summary #833 - IX-F Importer: Add failed email resending Implement re-send mechanic for emails that could not be sent (indicated by a sent value of null). When re-sending an email add a note to the email stating \"This email could not be delivered initially and may contain stale information\". Add a field to the admin-com import emails table to show this note as well. Update sent if send is successful #832 - IX-F Importer: suggested update when it should be add + remove In some edge cases a deletion will end up as a requirement incorrectly to a legitimate new entry still. See #770 #816 #831 - [prod] IX-F importer: NameError: name 'EmailMultiAlternatives' is not defined Fixes broken email function of ix-f importer #826 - Make technical poc mandatory when adding a netixlan Upon creating a netixlan object check that net has at least one ( Technical , NOC , Policy ) poc and that the poc has an e-mail address. If not ask them to create one first. Visibility of at least one ( Technical , NOC , Policy ) poc has to be \"Users\" resp. \"Public\" #825 - [beta] IX-F importer: Make Importer return non-zero when there is an error that Ops should see Improvements to ix-f importer that allow for easier notification and tracking of errors for the Ops team #824 - IX-F Preview - shows the consolidated delete operation when it shouldn't Simplified the UI for consolidated modifications to improve user understanding #759 - Describe the 'never-via-routeservers' flag Add tooltip for never-via-routeservers option: \"Indicates if this network will announce its routes via route servers or not\" #571 - Facility registration tool adds identifier Fixes small UI bug in facility registration tool used by the Admin Committee #481 - Add min_speed and max_speed to ixlan Based on the discussion in #475 adds a new global setting that limits netixlan speed values now. It's not a property on the ixlan anymore. #371 - Clean up users in verification queue A tool to delete user entries older than 90 days from the so-called verification queue and run it on a regular schedule #370 - Make Website mandatory for suggesting a facility Website is now mandatory when suggesting a facility but zipcode only mandatory for countries that have zipcodes #321 - Typos in locale Fixes a number of typographical errors","title":"Release 2.23.0"},{"location":"release_notes/#release-2220","text":"Beta Announcement Date: 15 July, 2020 Release Date: 26 August, 2020 GitHub Issue Summary #249 - Add the IX-F Member Export URL to the ixlan API endpoint There are two new fields in the ixlan section resp. the ixlan object, called ixf_ixp_member_list_url and ixf_ixp_member_list_url_visible. The first one contains the URL to the IX-F import file while the second governs the visibility of the URL. Values are the same as for the poc object, namely \"Public\", \"Users\" and \"Private\", defaulting to \"Private\" (i.e. or users who are members of the org). #268 - Database: unique constraints This issue fixes internal DB behaviour. #358 - Lock ASN once the record is created Once a network has been created, the field asn is made read-only. As the ASN is unique there is no reason to change it. Making the field read-only is to prevent unwanted side effects. #431 - Null 'rencode' from facility Null out all values for legacy unused rencode field, and make it read only to prepare for removal in PDB v3 [#625] (https://github.com/peeringdb/peeringdb/issues/625). #600 - Visibility for \"Allow IXP update\" switch A new field is added to the API net object, called allow_ixp_update. Furthermore, a line is added in global stats in the footer with a count (called \"Automated Networks\") of the networks which have \"Allow IXP Update\" enabled. #649 - Possible for 'ok' ixpfx to exist in 'pending' ixlan This issue fixes an internal bug. #683 - Add net_count_ixf field to ix object A field is added to the API object ix, called net_count_ixf, which indicates the number of net objects the exchange has in their IX-F JSON if they provide one. Otherwise, the value is null. #696 - Lock some objects from being deleted by the owner To protect operational data objects fac, ix, ixlan and org are prevented from being deleted as long as there are other objects related to it. First, these objects must be deleted before the object itself can be deleted. The attempt to delete such a protected object gives an error message and also opens a ticket with the PeeringDB support. #697 - Creating, changing, and deleting a netixlan object We completely re-implemented the way a connection to an exchange is handled. This new procedure allows both for a safe heads up a network can give to their peers as well as a safe way for exchanges to get rid of stale entries. Moreover, it allows networks to easily acknowledge new entries at exchanges which use the IX-F importer feature. See also the webinar for detailed information on this new procedure.","title":"Release 2.22.0"},{"location":"release_notes/#release-2210","text":"Beta Announcement Date: 24 June, 2020 Release Date: 1 July, 2020 GitHub Issue Summary #72 - Enable sort and reverse sort of IP column in IX display Sort and reverse sort of IP column in IX display are added. Sort of the IP addresses in the expected natural order. The IPv4 address is the primary sort key. The IPv6 address is the secondary key. #121 - missing delete button for organisations New feature. An admin user is able to delete an org if it has no live objects under it. #290 - Offer 2FA 2FA is offered now. The implementation includes optional 2FA using TOTP is offered there is a knob in the user profile to enable and set it up email recovery is added using the verified user email address an icon is added in the org admin section to denote to org admins if users have 2FA enabled #352 - Mark IXP peering LAN as bogon Allow IXP to tag their LAN prefixes as bogons. In general, LAN prefixes should not be visible in the DFZ. If it should be visible, IXPs are able to debogonise them #356 - Sorting by clicking table headers should use local-compare Bugfix. Sorting now honours locale-sorting #519 - Make spelling of traffic levels consistent This is a bug fix and a minor improvement. Spelling is made consistent and traffic levels up to 100+Tbps are added. #526 - Show \"Last Updated\" fields on fac, ix, org records A \"Last Updated\" field is visible now for fac, ix, and org objects #537 - Posting https://www.peeringdb.com onto social media doesn't select a good preview image Add opengraph image for page preview. #566 - Should deleted personal data be accessable through the API? If a poc object is deleted it is made immediately non-gettable via the API, too. In case the corresponding net object was deleted unintentionally the object is still kept in the DB. After 30 days it will be hard-deleted. #569 - Don't return any POC data with status=deleted POC objects do have a visibility scope. If a POC record is deleted it should not be able to retrieve it at all, even if visibility had been set to \"public\" before. The data will still be kept internally for 30 days for rollback if the deletion happened unintentionally. After 30 days the record will be hard-deleted. #580 - Add a clear error message, when user tries to re-add a previously deleted facility Bug fix for an unclear behaviour. If a connection from a network to a facility was deleted the user was unable to re-add this connection by themselves and an unclear error message was given. Now, the user is able to re-add the connection. #618 - Support alternative direction of writing, e.g. Arabic For right-to-left written languages, the entire layout of the PeeringDB website has to be flipped around. #644 - Undeleting an ixlan with an emtpy IPv4 XOR IPv6 field throws a silly error Bugfix for the Admin Committee UI. An empty field was considered to be a legit non-null value and the system hence enforced uniqueness #650 - Add pointer from API docs to tutorial A URL is added from the API documentation website to the PeeringDB tutorials #654 - Add pointer from API docs to tutorial Bugfix for the Admin Committee UI. #663 - change default encoding of API calls to 'utf-8' The output of API calls will change from content-type: application/json; charset=iso-8859-1 to content-type: application/json; charset=utf-8 #664 - Selection should only present undeleted objects Admin Committee only related. Only non-deleted should be presented for selection #666 - Selection should only present undeleted objects When changing owner of an ix admin GUI borks because of \"Ixlan for exchange already exists\" #669 - Add help text to \"Add {Facility, Network, Exchange} tab Added a better help text to make crystal clear that adding a Facility, Network, or Exchange means that you are owning this object. #679 - Add read-only Superuser Provide PC members with a read-only access to the Admin UI. #712 - User is unable to update their net record Bug fix. Missing pointer to where the non-compliant value is","title":"Release 2.21.0"},{"location":"release_notes/#release-2202","text":"Release Date: 23 April, 2020 GitHub Issue Summary #707 - Make source not required for IRR records Making source not required for IRR records. This requirement was an oversight during implementation of [#151 - Validation of IRR Records] (https://github.com/peeringdb/peeringdb/issues/151) that was released with 2.20.0 - see below. Product Committee revisited the issue after 2.20.0 and reports of concern from community and decided to retract the requirement in an emergency release","title":"Release 2.20.2"},{"location":"release_notes/#release-2201","text":"Release Date: 21 April, 2020 GitHub Issue Summary #702 - Requests from peeringdb-py error 500 Emergency release for a config change","title":"Release 2.20.1"},{"location":"release_notes/#release-2200","text":"Beta Announcement Date: 15 April, 2020 Release Date: 21 April, 2020 GitHub Issue Summary #151 - Validation of IRR Records To make the IRR as-set/route-set field of more operational value, strict rules apply the as-set/rs-set name has to conform to RFC 2622 (5.1 and 5.2) the source may be specified by AS-SET@SOURCE or SOURCE::AS-SET (preferred) valid sources are taken from the list of known IRRs multiple values must be separated by either ,, , or , (i.e. comma, space or comma followed by space) #189 - Improve explanatory and help text A clear help text is added for requesting affiliation to an organisation. #251 - Limit number of concurrent affiliation requests per user In order to reduce organization affiliation request spamming, the number of pending organization requests has been limited to 5. #295 Desk pro tickets - DeskPRO tickets This is a bug fix and only affects the Admin UI. #378 - Add contact information for Facilities (fac) the same way as for ix and net Contact information is added to Facilities and IXP. #452 - Org/Network name of a sponsor should not link to /sponsors, only the sponsor badge should This is a bug fix. From now on only when clicking on the sponsor badge will direct to the sponsor page. #462 - Route-server URL starting with ssh:// Add SSH as supported protocol. #539 - Add attribute 'operational' to 'netixlan' This is a new feature and allows networks to give early notice to their peers that they soon will show up at an IXP. There is a new check box when adding an IXP connection. By default, a connection is considered operational and the box is ticked. When the connection is still in provisioning status, please untick the box. When viewing, the warning glyphicon is shown right to the network name. The correspondent API object netixlan is enhanced by a boolean field operational defaulting to true. This feature is in line with the Data Ownership Policy . #548 - containerize server Internal software deployment system has been changed to use containers which reduces time spent by the ops team for deployments, allows for better scaling, and reduces the cost of entry for new developers to write and test their code. #555 - Notes field translate button disappears This is a bug fix. The \"Translate\" button is there for a moment and then disappeared. #557 - Show all languages on beta, even if translation is not ready for prod As soon as a new translation is starting it is available on the beta to help the translators and to encourage the community for input. #598 - bug caused by the org affiliationship request without an asn This is a bug fix and is only relevant for the PeeringDB Admin Committee. #609 - When creating an ix via the API also return ixlan_id and ixpfx_id When creating an IX record via API, the call will also return the implicitly created ixlan_id and ixpfx_id. This makes it simpler and reduces the number of calls that need to be made to the API. #615 - Insert links into ID fields in DESKPRO AUTOASN tickets This only affects tickets generated for PeeringDB Admin Committee. A link to the object in the UI is added. #626 - Update API docs Internal mechanisms for generating the API docs have been updated to current standards. This also allows for easier user contributions to the docs themselves. #634 - Remove support for python2 Python 2.7 and 3.4 support is being removed from PeeringDB packages. #636 - Don't create a new net object, when there only is an ASN block This is a bug fix and is only relevant for the PeeringDB Admin Committee. #667 - Fix use autocomplete fields in the admincom controlpanel to speed up loading times This is a bug fix and is only relevant for the PeeringDB Admin Committee.","title":"Release 2.20.0"},{"location":"taskforce/dataownership/","text":"PeeringDB Data Ownership Task Force The Data Ownership Task Force was established in September 2019 with the aim of working on a PeeringDB Policy proposal about data ownership, after a need was recognized by the Product Committee as issues consistently had been raised relating to who owns the data in PeeringDB when more than one party is involved (as in netixlan, ixfac, netfac, etc objects). A call for participation to the task Force was made on September 10th, 2019. Data Ownership Task Force discussions are archived and can be found at: https://lists.peeringdb.com/pipermail/dataownership-tf/ This webpage is where the work of Data Ownership Task Force will be documented, including meeting minutes, draft documents etc. as their work progresses. In April 2020, the Task Force completed its work and published the resulting PeeringDB Data Ownership Policy Document after few cycles of a Review Phase and a final Last Call over a draft document circulated on their mailing list. (Please see the mailing list archives linked above.) The resulting document can be found at: https://docs.peeringdb.com/gov/misc/2020-04-06_PeeringDB_Data_Ownership_Policy_Document_v1.0.pdf Scope The Data Ownership Task Force is established to discuss and agree on who owns the data tokens and/or objects in PeeringDB. Their agreements, findings, and any sort of recommendations will be documented in a Policy Document as a direct outcome of the Task Force. This Policy Document will include a clear description of each data element and the relation between each other, as well as who should be allowed to create, update, and delete them. The Task Force is estimated to conclude its work within about 6 months from its inception, which was September 2019. This time frame will be extended if the Task Force needs more time to conclude its work. The resulting Policy Document will be announced and shared with the PeeringDB Community. After publishing the Policy Document, the Task Force ended. Data Ownership Policy Implementation Presentation This video and presentation explains how PeeringDB handles IX-F import data, creating, changing or deleting netixlan objects and other changes from the implementation of the PeeringDB Data Ownership Policy. Members Darrell Budic Chris Caputo Patrick Gilmore Shane Kerr Fredrik Korsb\u00e4ck Jhonny Lima Ben Maddison Christopher Malayter William Marantz Jeri McNeill Arnold Nipper Barry O\u2019Donovan Mustafa Timur Sever Bijal Shangani Job Snijders Terry Sweetser Lukas Tribus Stefan Wahl Filiz Yilmaz (Chair)","title":"Data Ownership Task Force"},{"location":"taskforce/dataownership/#peeringdb-data-ownership-task-force","text":"The Data Ownership Task Force was established in September 2019 with the aim of working on a PeeringDB Policy proposal about data ownership, after a need was recognized by the Product Committee as issues consistently had been raised relating to who owns the data in PeeringDB when more than one party is involved (as in netixlan, ixfac, netfac, etc objects). A call for participation to the task Force was made on September 10th, 2019. Data Ownership Task Force discussions are archived and can be found at: https://lists.peeringdb.com/pipermail/dataownership-tf/ This webpage is where the work of Data Ownership Task Force will be documented, including meeting minutes, draft documents etc. as their work progresses. In April 2020, the Task Force completed its work and published the resulting PeeringDB Data Ownership Policy Document after few cycles of a Review Phase and a final Last Call over a draft document circulated on their mailing list. (Please see the mailing list archives linked above.) The resulting document can be found at: https://docs.peeringdb.com/gov/misc/2020-04-06_PeeringDB_Data_Ownership_Policy_Document_v1.0.pdf","title":"PeeringDB Data Ownership Task Force"},{"location":"taskforce/dataownership/#scope","text":"The Data Ownership Task Force is established to discuss and agree on who owns the data tokens and/or objects in PeeringDB. Their agreements, findings, and any sort of recommendations will be documented in a Policy Document as a direct outcome of the Task Force. This Policy Document will include a clear description of each data element and the relation between each other, as well as who should be allowed to create, update, and delete them. The Task Force is estimated to conclude its work within about 6 months from its inception, which was September 2019. This time frame will be extended if the Task Force needs more time to conclude its work. The resulting Policy Document will be announced and shared with the PeeringDB Community. After publishing the Policy Document, the Task Force ended.","title":"Scope"},{"location":"taskforce/dataownership/#data-ownership-policy-implementation-presentation","text":"This video and presentation explains how PeeringDB handles IX-F import data, creating, changing or deleting netixlan objects and other changes from the implementation of the PeeringDB Data Ownership Policy.","title":"Data Ownership Policy Implementation Presentation"},{"location":"taskforce/dataownership/#members","text":"Darrell Budic Chris Caputo Patrick Gilmore Shane Kerr Fredrik Korsb\u00e4ck Jhonny Lima Ben Maddison Christopher Malayter William Marantz Jeri McNeill Arnold Nipper Barry O\u2019Donovan Mustafa Timur Sever Bijal Shangani Job Snijders Terry Sweetser Lukas Tribus Stefan Wahl Filiz Yilmaz (Chair)","title":"Members"}]}